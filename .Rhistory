scale_color_manual(values=colscale_disc)+
theme_Bede()+
ylab("Standardised Reflectance")+
xlab("Wavelength (nm)")+
theme(legend.position = c(0.15, 0.8),
legend.text = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))+
coord_cartesian(xlim = c(420, 900)) +
# ggtitle(paste("Zoom jusqu’à", round(x_max), "nm")) +
theme(
legend.position = c(0.15, 0.8),
legend.text = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12)
)+
transition_states(Class,
transition_length = 2,
state_length = 1)
rendered_zoomed_out <- animate(faded_zoomed_out, duration = 2, fps = 20, width = 8, height = 6, units = "in", res = 300, end_pause = 1, rewind = F, renderer = gifski_renderer(loop = T))
anim_save("Images/Part1/Figure_Hyperspectral_Faded_zoomed_out.gif", animation = rendered_zoomed_out)
faded_zoomed_out <- speclib %>%
dplyr::filter(Class %in% c("B - Chlorophyceae", "C - Magnoliopsida")) %>%
mutate(Class = case_when(Class == "B - Chlorophyceae" ~ "Chlorophyceae",
Class == "C - Magnoliopsida" ~ "Magnoliopsida")) %>%
ggplot()+
geom_line(data = fade_class, mapping = aes(x = Wavelength, y = Ref, group = Class1), color = "grey", alpha = 0.2, linewidth = 1.5)+
geom_line(aes(x = Wavelength, y = Ref, color = Class, group = 1L), linewidth = 1.5)+
scale_color_manual(values=colscale_disc)+
theme_Bede()+
ylab("Standardised Reflectance")+
xlab("Wavelength (nm)")+
theme(legend.position = c(0.15, 0.8),
legend.text = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))+
coord_cartesian(xlim = c(450, 900)) +
# ggtitle(paste("Zoom jusqu’à", round(x_max), "nm")) +
theme(
legend.position = c(0.15, 0.8),
legend.text = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12)
)+
transition_states(Class,
transition_length = 2,
state_length = 1)
rendered_zoomed_out <- animate(faded_zoomed_out, duration = 2, fps = 20, width = 8, height = 6, units = "in", res = 300, end_pause = 1, rewind = F, renderer = gifski_renderer(loop = T))
anim_save("Images/Part1/Figure_Hyperspectral_Faded_zoomed_out.gif", animation = rendered_zoomed_out)
faded_zoomed_out <- speclib %>%
dplyr::filter(Class %in% c("B - Chlorophyceae", "C - Magnoliopsida")) %>%
mutate(Class = case_when(Class == "B - Chlorophyceae" ~ "Chlorophyceae",
Class == "C - Magnoliopsida" ~ "Magnoliopsida")) %>%
ggplot()+
# geom_line(data = fade_class, mapping = aes(x = Wavelength, y = Ref, group = Class1), color = "grey", alpha = 0.2, linewidth = 1.5)+
geom_line(aes(x = Wavelength, y = Ref, color = Class, group = 1L), linewidth = 1.5)+
scale_color_manual(values=colscale_disc)+
theme_Bede()+
ylab("Standardised Reflectance")+
xlab("Wavelength (nm)")+
theme(legend.position = c(0.15, 0.8),
legend.text = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))+
coord_cartesian(xlim = c(450, 900)) +
# ggtitle(paste("Zoom jusqu’à", round(x_max), "nm")) +
theme(
legend.position = c(0.15, 0.8),
legend.text = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12)
)+
transition_states(Class,
transition_length = 2,
state_length = 1)
rendered_zoomed_out <- animate(faded_zoomed_out, duration = 2, fps = 20, width = 8, height = 6, units = "in", res = 300, end_pause = 1, rewind = F, renderer = gifski_renderer(loop = T))
anim_save("Images/Part1/Figure_Hyperspectral_Faded_zoomed_out.gif", animation = rendered_zoomed_out)
5280/2970
16/9
29.27/21
16/9
28.9+138.9+104.9+21+17.95+15.9+15.95
104.9+21+17.95+15.9+15.95
343.5*(0.2)
138.9+28.9+104.9+21+17.95+15.9+15.95
286.25+57.25
286.25*0.2
library(terra)
library(tidyverse)
library(Utilities.Package)
library(sf)
msk <- "Data/Part2/Belon/Belon_32630.shp" %>%
read_sf()
DISCOV_rast <- rast("Data/Part2/Belon/Belon_1104_MS_DISCOV_InvaSea_26112024_pred.tif") %>%
project(crs(msk), method = "near") %>%
crop(msk, mask = T) %>%
focal(w=7, fun="modal",na.rm=TRUE)
writeRaster(DISCOV_rast, "Data/Part2/Belon/Belon_1104_MS_DISCOV_InvaSea_26112024_pred_7.tif")
#| echo: false
#| eval: false
#| warning: false
df <- list.files("Data/Part3/",pattern = "HOR_departement_56_*", full.names = TRUE) %>%
map(read.delim,
sep = ";",
.progress = TRUE) %>%
list_rbind() %>%
dplyr::select(NOM_USUEL, LAT,LON,,AAAAMMJJHH,`T`, TN, TX, T10, T20, T50,T100) %>%
dplyr::filter(!is.na(`T`))
library(tidyverse)
df <- list.files("Data/Part3/",pattern = "HOR_departement_56_*", full.names = TRUE) %>%
map(read.delim,
sep = ";",
.progress = TRUE) %>%
list_rbind() %>%
dplyr::select(NOM_USUEL, LAT,LON,,AAAAMMJJHH,`T`, TN, TX, T10, T20, T50,T100) %>%
dplyr::filter(!is.na(`T`))
#| echo: false
#| eval: false
#| warning: false
library(heatwaveR)
df_date <- df  %>%
mutate(date = as.POSIXct(strptime(AAAAMMJJHH, format = "%Y%m%d%H"))) %>%
group_by(NOM_USUEL) %>%
reframe(min_date = min(date,na.rm = T),
max_date = max(date,na.rm = T),
n = n())
selected_site <- df_date %>%
filter(n ==max(n)) %>%
pull(NOM_USUEL)
df_sub <- df %>%
dplyr::filter(NOM_USUEL == "LORIENT-LANN BIHOUE",
!is.na(`T`)) %>%
dplyr::select(NOM_USUEL, LAT,LON,,AAAAMMJJHH,`T`, TN, TX, T10, T20, T50,T100) %>%
mutate(date = as.POSIXct(as.character(AAAAMMJJHH), format = "%Y%m%d%H",tz = "UTC"))
ggplot(df_sub)+
# geom_hex(aes(x = date, y = `T`), bins = 10)+
geom_line(aes(x = date, y = `T`))+
ylab("Temperature (°C)")+
xlab("Date")+
theme_Bede()+
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))
library(Utilities.Package)
ggplot(df_sub)+
# geom_hex(aes(x = date, y = `T`), bins = 10)+
geom_line(aes(x = date, y = `T`))+
ylab("Temperature (°C)")+
xlab("Date")+
theme_Bede()+
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))
df_heatwaveR <- df_sub %>%
rename(t = date,
temp = `T`) %>%
dplyr::select(t,temp) %>%
mutate(t = as.Date(t)) %>%
group_by(t) %>%
reframe(temp = max(temp,na.rm = T)) %>%
dplyr::filter(t > as.Date("1948-12-31"))
clim <- ts2clm(df_heatwaveR, climatologyPeriod = c(min(df_heatwaveR$t), max(df_heatwaveR$t)))
event <- detect_event(clim,categories = T,minDuration = 3)
res <- detect_event(clim, minDuration = 3)
mhw <- res$clim
mhw %>%
filter(t> as.Date("2022-01-01") ) %>%
ggplot(aes(x = t, y = temp))+
geom_line() +
geom_flame(aes(y2 = thresh))
freq_heatwave <- event %>%
mutate(year = substr(as.character(date_start),1,4)) %>%
group_by(year) %>%
reframe(value = n()) %>%
mutate(data = "Frequency")
intensity_heatwave <- event %>%
mutate(year = substr(as.character(date_start),1,4)) %>%
group_by(year) %>%
reframe(value = sum(intensity_cumulative)) %>%
mutate(data = "Intensity") %>%
mutate(value = sqrt(value*value))
df_heatwaves <- rbind(freq_heatwave,intensity_heatwave) %>%
pivot_wider(names_from = data, values_from = value)
df_freq_HW <- df_heatwaves %>%
dplyr::select(-Intensity) %>%
mutate(year = as.numeric(year))
gam_freq_HW <- mgcv::gam(Frequency ~ s(year,
k=3),
# family = poisson(),
data = df_freq_HW)
Utilities.Package::Model_Check(gam_freq_HW)
NewData_freq_HW<-expand_grid(year=unique(df_freq_HW$year))
pred_freq_HW <- predict(gam_freq_HW, NewData_freq_HW, se.fit = T, type = "link")
NewData_freq_HW <- NewData_freq_HW %>%
mutate(fit = pred_freq_HW$fit,
se = pred_freq_HW$se.fit)
(heatwaves_frequency <- ggplot(df_freq_HW, aes(x=year))+
geom_point(aes(y=Frequency), color = "darkred", alpha = 0.3)+
geom_line(data = NewData_freq_HW, aes(x = year, y = fit),color = "darkred")+
geom_ribbon(data = NewData_freq_HW, aes(x = year, y = fit, ymin = fit-se, ymax = fit+se),color = NA ,fill = "darkred",alpha = 0.2)+
ylab(expression("Frequency of atmospheric heatwaves (year"^"-1" * ")"))+
xlab(expression("Years"))+
scale_x_continuous(position = "top")+
theme_Bede()+
# scale_fill_manual(values = coltab)+
theme(
# strip.text.y= element_text(size =17),
strip.text.y= element_blank(),
# legend.title = element_text(size =17, hjust = 0.5),
legend.title = element_blank(),
legend.title.position = "top",
legend.text = element_text(size =13),
# legend.text = element_text(hjust = 0, size =13),
axis.text.x = element_text(size = 13),
axis.text.y = element_text(size = 13),
axis.title.x = element_text(size = 13),
axis.title.y = element_text(size = 13),
legend.position = c(0.13, 0.92),
# legend.position = "top",
plot.background = element_rect(fill = "white", color =NA) ,
legend.key.width = unit(1,"cm"),
legend.key.height = unit(2,"mm")
# plot.margin = margin(t = 5, r = 5, b = 5, l = 5), # Adjusts plot margins
# legend.spacing.y = unit(0.1, "cm"),  # Reduces space between legend items vertically
# legend.margin = margin(t = 0, b = -10)
# panel.border = element_blank(),
)
)
(heatwaves_frequency <- ggplot(df_freq_HW, aes(x=year))+
geom_point(aes(y=Frequency), color = "darkred", alpha = 0.3)+
geom_line(data = NewData_freq_HW, aes(x = year, y = fit),color = "darkred")+
geom_ribbon(data = NewData_freq_HW, aes(x = year, y = fit, ymin = fit-se, ymax = fit+se),color = NA ,fill = "darkred",alpha = 0.2)+
ylab(expression("Frequency of atmospheric heatwaves (year"^"-1" * ")"))+
xlab(expression("Years"))+
# scale_x_continuous(position = "top")+
theme_Bede()+
# scale_fill_manual(values = coltab)+
theme(
# strip.text.y= element_text(size =17),
strip.text.y= element_blank(),
# legend.title = element_text(size =17, hjust = 0.5),
# legend.title = element_blank(),
# legend.title.position = "top",
legend.text = element_text(size =13),
# legend.text = element_text(hjust = 0, size =13),
axis.text.x = element_text(size = 13),
axis.text.y = element_text(size = 13),
axis.title.x = element_text(size = 13),
axis.title.y = element_text(size = 13),
legend.position = c(0.13, 0.92),
# legend.position = "top",
plot.background = element_rect(fill = "white", color =NA) ,
legend.key.width = unit(1,"cm"),
legend.key.height = unit(2,"mm")
# plot.margin = margin(t = 5, r = 5, b = 5, l = 5), # Adjusts plot margins
# legend.spacing.y = unit(0.1, "cm"),  # Reduces space between legend items vertically
# legend.margin = margin(t = 0, b = -10)
# panel.border = element_blank(),
)
)
ggsave("Images/Part3/HW_Freq_Inten.png", heatwaves_frequency, height = 10, width = 9.57, dpi = 300)
(heatwaves_frequency <- ggplot(df_freq_HW, aes(x=year))+
geom_point(aes(y=Frequency), color = "darkred", alpha = 0.3)+
geom_line(data = NewData_freq_HW, aes(x = year, y = fit),color = "darkred")+
geom_ribbon(data = NewData_freq_HW, aes(x = year, y = fit, ymin = fit-se, ymax = fit+se),color = NA ,fill = "darkred",alpha = 0.2)+
ylab(expression("Frequency of atmospheric heatwaves (year"^"-1" * ")"))+
xlab(expression("Years"))+
# scale_x_continuous(position = "top")+
theme_Bede()+
# scale_fill_manual(values = coltab)+
theme(
# strip.text.y= element_text(size =17),
strip.text.y= element_blank(),
# legend.title = element_text(size =17, hjust = 0.5),
# legend.title = element_blank(),
# legend.title.position = "top",
legend.text = element_text(size =20),
# legend.text = element_text(hjust = 0, size =13),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
legend.position = c(0.13, 0.92),
# legend.position = "top",
plot.background = element_rect(fill = "white", color =NA) ,
legend.key.width = unit(1,"cm"),
legend.key.height = unit(2,"mm")
# plot.margin = margin(t = 5, r = 5, b = 5, l = 5), # Adjusts plot margins
# legend.spacing.y = unit(0.1, "cm"),  # Reduces space between legend items vertically
# legend.margin = margin(t = 0, b = -10)
# panel.border = element_blank(),
)
)
ggsave("Images/Part3/HW_Freq_Inten.png", heatwaves_frequency, height = 10, width = 9.57, dpi = 300)
Data_MDS_List<-list()
Data_hulls_List<-list()
Data_MDS_List<-list()
Data_hulls_List<-list()
Data_AnoSIM_list<-list()
dataUntransformed <- read_rds("Data/Part1/dataUntransformed.rds")
datatransformed_Wide <- read_rds("Data/Part1/datatransformed_Wide.rds")
for (i in seq_along(datatransformed_Wide) ) {
Meta<-datatransformed_Wide[[i]]%>%
dplyr::filter(!Species_Group=="Bare Sediment") %>%
dplyr::select(Species,Species_Group)
Comm<-datatransformed_Wide[[i]]%>%
dplyr::filter(!Species_Group=="Bare Sediment")%>%
dplyr::select(-c(Substrate,Species_Group,Species) )  %>%
as.matrix()
set.seed(4321)
speclib_data <- speclib(spectra=Comm, wavelength=as.numeric(colnames(Comm) ) )
set.seed(2345)
SAM <- sam_distance(speclib_data)
ANOSIM<-anosim(SAM, grouping = Meta$Species_Group,permutations = 999)
Anosim_df<-data.frame(R=ANOSIM$statistic,
p=ANOSIM$signif) %>%
dplyr::mutate(Data=paste0(names(dataUntransformed)[[i]]) )
Data_AnoSIM_list[[i]]<-Anosim_df
mds_sam <- MASS::isoMDS(SAM,maxit = 50,trace=FALSE)
MDS_sam <- mds_sam$points %>%
as_tibble()  %>%
dplyr::rename(x=V1,y=V2)  %>%
bind_cols(Meta)  %>%
dplyr::mutate(Stress=mds_sam$stress/100,
Data=paste0(names(dataUntransformed) [[i]]) )
Data_MDS_List[[i]]<-MDS_sam
Magnoliopsida_hull <- MDS_sam[MDS_sam$Species_Group == "Magnoliosida",
][chull(MDS_sam[MDS_sam$Species_Group =="Magnoliosida",
c("x", "y") ]) , ]
Ulvophyceae_hull <- MDS_sam[MDS_sam$Species_Group == "Ulvophyceae",
][chull(MDS_sam[MDS_sam$Species_Group =="Ulvophyceae",
c("x","y") ]) , ]
Phaeophyceae_hull <- MDS_sam[MDS_sam$Species_Group == "Phaeophyceae",
][chull(MDS_sam[MDS_sam$Species_Group == "Phaeophyceae",
c("x","y") ]) , ]
Xanthophyceae_hull <- MDS_sam[MDS_sam$Species_Group == "Xanthophyceae",
][chull(MDS_sam[MDS_sam$Species_Group == "Xanthophyceae",
c("x","y") ]) , ]
Bacillariophyceae_hull <- MDS_sam[MDS_sam$Species_Group == "Bacillariophyceae",
][chull(MDS_sam[MDS_sam$Species_Group =="Bacillariophyceae",
c("x","y") ]) , ]
hulls <- rbind(Magnoliopsida_hull,
Ulvophyceae_hull,
Phaeophyceae_hull,
Xanthophyceae_hull,
Bacillariophyceae_hull)  %>%
dplyr::mutate(Data=paste0(names(dataUntransformed) [[i]]) )
Data_hulls_List[[i]]<-hulls
}
library(hsdar)
library(vegan)
library(tidyverse)
Data_MDS_List<-list()
Data_hulls_List<-list()
Data_AnoSIM_list<-list()
dataUntransformed <- read_rds("Data/Part1/dataUntransformed.rds")
datatransformed_Wide <- read_rds("Data/Part1/datatransformed_Wide.rds")
for (i in seq_along(datatransformed_Wide) ) {
Meta<-datatransformed_Wide[[i]]%>%
dplyr::filter(!Species_Group=="Bare Sediment") %>%
dplyr::select(Species,Species_Group)
Comm<-datatransformed_Wide[[i]]%>%
dplyr::filter(!Species_Group=="Bare Sediment")%>%
dplyr::select(-c(Substrate,Species_Group,Species) )  %>%
as.matrix()
set.seed(4321)
speclib_data <- speclib(spectra=Comm, wavelength=as.numeric(colnames(Comm) ) )
set.seed(2345)
SAM <- sam_distance(speclib_data)
ANOSIM<-anosim(SAM, grouping = Meta$Species_Group,permutations = 999)
Anosim_df<-data.frame(R=ANOSIM$statistic,
p=ANOSIM$signif) %>%
dplyr::mutate(Data=paste0(names(dataUntransformed)[[i]]) )
Data_AnoSIM_list[[i]]<-Anosim_df
mds_sam <- MASS::isoMDS(SAM,maxit = 50,trace=FALSE)
MDS_sam <- mds_sam$points %>%
as_tibble()  %>%
dplyr::rename(x=V1,y=V2)  %>%
bind_cols(Meta)  %>%
dplyr::mutate(Stress=mds_sam$stress/100,
Data=paste0(names(dataUntransformed) [[i]]) )
Data_MDS_List[[i]]<-MDS_sam
Magnoliopsida_hull <- MDS_sam[MDS_sam$Species_Group == "Magnoliosida",
][chull(MDS_sam[MDS_sam$Species_Group =="Magnoliosida",
c("x", "y") ]) , ]
Ulvophyceae_hull <- MDS_sam[MDS_sam$Species_Group == "Ulvophyceae",
][chull(MDS_sam[MDS_sam$Species_Group =="Ulvophyceae",
c("x","y") ]) , ]
Phaeophyceae_hull <- MDS_sam[MDS_sam$Species_Group == "Phaeophyceae",
][chull(MDS_sam[MDS_sam$Species_Group == "Phaeophyceae",
c("x","y") ]) , ]
Xanthophyceae_hull <- MDS_sam[MDS_sam$Species_Group == "Xanthophyceae",
][chull(MDS_sam[MDS_sam$Species_Group == "Xanthophyceae",
c("x","y") ]) , ]
Bacillariophyceae_hull <- MDS_sam[MDS_sam$Species_Group == "Bacillariophyceae",
][chull(MDS_sam[MDS_sam$Species_Group =="Bacillariophyceae",
c("x","y") ]) , ]
hulls <- rbind(Magnoliopsida_hull,
Ulvophyceae_hull,
Phaeophyceae_hull,
Xanthophyceae_hull,
Bacillariophyceae_hull)  %>%
dplyr::mutate(Data=paste0(names(dataUntransformed) [[i]]) )
Data_hulls_List[[i]]<-hulls
}
library(gganimate)
library(tidyverse)
library(Utilities.Package)
interpolate_column <- function(x, year) {
if (sum(!is.na(x)) >= 2) {
# Only interpolate if there are at least 2 points
approx(x = year[!is.na(x)], y = x[!is.na(x)], xout = year)$y
} else {
# If not enough data, return the original
x
}
}
df <- readxl::read_excel("Data/Part2/Prod_oyster.xlsx") %>%
mutate(across(-YEAR, ~ interpolate_column(.x, YEAR))) %>%
pivot_longer(-YEAR, names_to = "Species", values_to = "Production") %>%
mutate(Production = case_when(Production == -99 ~ NA,
T ~ Production),
Species = case_when(Species == "angulata" ~ "C. angulata",
Species == "Edulis" ~ "O. edulis",
T ~ "C. gigas"),
years = YEAR)
df %>%
ggplot(aes(x = YEAR, y = Production, color = Species)) +
geom_line(size = 1.2) + # thicker lines
scale_color_brewer(palette = "Set1") + # nice color palette
labs(
title = "Production over Years by Species",
x = "Year",
y = "Production (Tons)",
color = "Species"
) +
theme_minimal(base_size = 14) + # clean theme with bigger base text
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "right",
legend.text = element_text(face = "italic") # italic legend text
)
min_year <- min(df$YEAR, na.rm = TRUE)
max_prod <- max(df$Production, na.rm = T)
df
p <- ggplot(df,
aes(x = YEAR,
y = Production,
color = Species,
group = Species)) +
geom_line(size = 1.2) +
scale_color_manual(values = colscale) +
ylim(c(0,max_prod))+
xlim(c(1900,2010))+
labs(
title = "Production over Years by Species",
x = "Year",
y = "Production (Thousand Metric Tons)",
color = "Species"
) +
theme_bw(base_size = 14) +
theme(
plot.title  = element_text(hjust = 0.5, face = "bold", size = 40),
legend.position = c(0.2,0.8),
legend.text = element_text(face = "italic", size = 30),
legend.title = element_text(size = 35),
legend.key.size = unit(1,"cm"),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_text(size = 35),
axis.title.y = element_text(size = 35),
) +
transition_reveal(YEAR)
colscale <- c("C. gigas" = "#377eb8","O. edulis" = "#e41a1c","C. angulata" = "#4daf4a")
p <- ggplot(df,
aes(x = YEAR,
y = Production,
color = Species,
group = Species)) +
geom_line(size = 1.2) +
scale_color_manual(values = colscale) +
ylim(c(0,max_prod))+
xlim(c(1900,2010))+
labs(
title = "Production over Years by Species",
x = "Year",
y = "Production (Thousand Metric Tons)",
color = "Species"
) +
theme_bw(base_size = 14) +
theme(
plot.title  = element_text(hjust = 0.5, face = "bold", size = 40),
legend.position = c(0.2,0.8),
legend.text = element_text(face = "italic", size = 30),
legend.title = element_text(size = 35),
legend.key.size = unit(1,"cm"),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_text(size = 35),
axis.title.y = element_text(size = 35),
) +
transition_reveal(YEAR)
# render it
# animate(p, nframes = 50, fps = 50, width = 800, height = 600, loop = F)
rendered <- animate(p,  nframes = 50, fps = 50, width = 1500, height = 1080, end_pause = 20, rewind = FALSE, renderer = gifski_renderer(loop = FALSE))
anim_save("Images/Part2/Oyster_gigas2.gif", animation = rendered)
library(rgdal)
library(hsdar)
298+266
564-509
