<!DOCTYPE html>
<!-- saved from url=(0177)file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV.html -->
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script src="chrome-extension://eppiocemhmnlbhjplcgkofciiegomcon/content/location/location.js" id="eppiocemhmnlbhjplcgkofciiegomcon"></script><style type="text/css" id="operaUserStyle"></style><script src="chrome-extension://eppiocemhmnlbhjplcgkofciiegomcon/libs/extend-native-history-api.js"></script><script src="chrome-extension://eppiocemhmnlbhjplcgkofciiegomcon/libs/requests.js"></script>


<meta name="generator" content="quarto-1.6.33">

<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">


<title>DISCOV: The Intertidal Drone Classification Model for Micasense – DISCOV</title>
<style>
code{white-space: pre-wrap;}
span.smallcaps{font-variant: small-caps;}
div.columns{display: flex; gap: min(4vw, 1.5em);}
div.column{flex: auto; overflow-x: auto;}
div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
ul.task-list{list-style: none;}
ul.task-list li input[type="checkbox"] {
  width: 0.8em;
  margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ 
  vertical-align: middle;
}
</style>


<script src="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/quarto-nav.js.t%C3%A9l%C3%A9charg%C3%A9"></script>
<script src="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/headroom.min.js.t%C3%A9l%C3%A9charg%C3%A9"></script>
<script src="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/clipboard.min.js.t%C3%A9l%C3%A9charg%C3%A9"></script>
<script src="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/autocomplete.umd.js.t%C3%A9l%C3%A9charg%C3%A9"></script>
<script src="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/fuse.min.js.t%C3%A9l%C3%A9charg%C3%A9"></script>
<script src="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/quarto-search.js.t%C3%A9l%C3%A9charg%C3%A9"></script>
<meta name="quarto:offset" content="./">
<link href="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/DISCOV_logo.png" rel="icon" type="image/png">
<script src="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/quarto.js.t%C3%A9l%C3%A9charg%C3%A9"></script>
<script src="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/popper.min.js.t%C3%A9l%C3%A9charg%C3%A9"></script>
<script src="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/tippy.umd.min.js.t%C3%A9l%C3%A9charg%C3%A9"></script>
<link href="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/tippy.css" rel="stylesheet">
<link href="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/quarto-syntax-highlighting-07ba0ad10f5680c660e360ac31d2f3b6.css" rel="stylesheet" class="quarto-color-scheme" id="quarto-text-highlighting-styles">
<link href="https://sigoiry.github.io/DISCOV-MicaSense/site_libs/quarto-html/quarto-syntax-highlighting-dark-8b864f0777c60eecff11d75b6b2e1175.css" rel="prefetch" class="quarto-color-scheme quarto-color-alternate" id="quarto-text-highlighting-styles">
<script src="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/bootstrap.min.js.t%C3%A9l%C3%A9charg%C3%A9"></script>
<link href="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/bootstrap-icons.css" rel="stylesheet">
<link href="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/bootstrap-b9dacbbcb82649c63776ad641958ae16.min.css" rel="stylesheet" append-hash="true" class="quarto-color-scheme" id="quarto-bootstrap" data-mode="light">
<link href="https://sigoiry.github.io/DISCOV-MicaSense/site_libs/bootstrap/bootstrap-dark-c7e3f1182afcadb818cd0bb7385040a1.min.css" rel="prefetch" append-hash="true" class="quarto-color-scheme quarto-color-alternate" id="quarto-bootstrap" data-mode="dark">
<script id="quarto-search-options" type="application/json">{
  "location": "navbar",
  "copy-button": false,
  "collapse-after": 3,
  "panel-placement": "end",
  "type": "overlay",
  "limit": 50,
  "keyboard-shortcut": [
    "f",
    "/",
    "s"
  ],
  "show-item-context": false,
  "language": {
    "search-no-results-text": "No results",
    "search-matching-documents-text": "matching documents",
    "search-copy-link-title": "Copy link to search",
    "search-hide-matches-text": "Hide additional matches",
    "search-more-match-text": "more match in this document",
    "search-more-matches-text": "more matches in this document",
    "search-clear-button-title": "Clear",
    "search-text-placeholder": "",
    "search-detached-cancel-button-title": "Cancel",
    "search-submit-button-title": "Submit",
    "search-label": "Search"
  }
}</script>

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="DISCOV is an intertidal drone classification model developed for Micasense.">
  <meta name="keywords" content="DISCOV, intertidal mapping, Drone, Classification model, Micasense, Seagrass">
  <meta name="author" content="Simon Oiry">
  <meta itemprop="name" content="DISCOV: The Intertidal Drone Classification Model for Micasense">
  <meta itemprop="description" content="DISCOV is an intertidal drone classification model developed for Micasense.">
  <meta itemprop="keywords" content="DISCOV, intertidal mapping, Drone, Classification model, Micasense, Seagrass">
<link rel="stylesheet" href="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/styles.css"><style type="text/css" id="operaUserStyle"></style><script bis_use="true" type="text/javascript" charset="utf-8" data-bis-config="[&quot;facebook.com/&quot;,&quot;twitter.com/&quot;,&quot;youtube-nocookie.com/embed/&quot;,&quot;//vk.com/&quot;,&quot;//www.vk.com/&quot;,&quot;linkedin.com/&quot;,&quot;//www.linkedin.com/&quot;,&quot;//instagram.com/&quot;,&quot;//www.instagram.com/&quot;,&quot;//www.google.com/recaptcha/api2/&quot;,&quot;//hangouts.google.com/webchat/&quot;,&quot;//www.google.com/calendar/&quot;,&quot;//www.google.com/maps/embed&quot;,&quot;spotify.com/&quot;,&quot;soundcloud.com/&quot;,&quot;//player.vimeo.com/&quot;,&quot;//disqus.com/&quot;,&quot;//tgwidget.com/&quot;,&quot;//js.driftt.com/&quot;,&quot;friends2follow.com&quot;,&quot;/widget&quot;,&quot;login&quot;,&quot;//video.bigmir.net/&quot;,&quot;blogger.com&quot;,&quot;//smartlock.google.com/&quot;,&quot;//keep.google.com/&quot;,&quot;/web.tolstoycomments.com/&quot;,&quot;moz-extension://&quot;,&quot;chrome-extension://&quot;,&quot;/auth/&quot;,&quot;//analytics.google.com/&quot;,&quot;adclarity.com&quot;,&quot;paddle.com/checkout&quot;,&quot;hcaptcha.com&quot;,&quot;recaptcha.net&quot;,&quot;2captcha.com&quot;,&quot;accounts.google.com&quot;,&quot;www.google.com/shopping/customerreviews&quot;,&quot;buy.tinypass.com&quot;,&quot;gstatic.com&quot;,&quot;secureir.ebaystatic.com&quot;,&quot;docs.google.com&quot;,&quot;contacts.google.com&quot;,&quot;github.com&quot;,&quot;mail.google.com&quot;,&quot;chat.google.com&quot;,&quot;audio.xpleer.com&quot;,&quot;keepa.com&quot;,&quot;static.xx.fbcdn.net&quot;,&quot;sas.selleramp.com&quot;,&quot;1plus1.video&quot;,&quot;console.googletagservices.com&quot;,&quot;//lnkd.demdex.net/&quot;,&quot;//radar.cedexis.com/&quot;,&quot;//li.protechts.net/&quot;,&quot;challenges.cloudflare.com/&quot;,&quot;ogs.google.com&quot;]" src="chrome-extension://eppiocemhmnlbhjplcgkofciiegomcon/executors/traffic.js"></script><style type="text/css"></style><link id="operaalerabat-link" rel="stylesheet" type="text/css" href="chrome-extension://eplcjggklbefnipglcfdfalbbjpmkbkl/content.css"><style id="quarto-target-style">
      section:target::before {
        content: "";
        display: block;
        height: 94px;
        margin: -94px 0 0;
      }</style></head>





<body class="nav-fixed quarto-light" __processed_42230beb-83fd-4b11-a025-2304a55f76e8__="true" bis_register="W3sibWFzdGVyIjp0cnVlLCJleHRlbnNpb25JZCI6ImVwcGlvY2VtaG1ubGJoanBsY2drb2ZjaWllZ29tY29uIiwiYWRibG9ja2VyU3RhdHVzIjp7IkRJU1BMQVkiOiJlbmFibGVkIiwiRkFDRUJPT0siOiJlbmFibGVkIiwiVFdJVFRFUiI6ImVuYWJsZWQiLCJSRURESVQiOiJlbmFibGVkIiwiUElOVEVSRVNUIjoiZW5hYmxlZCIsIklOU1RBR1JBTSI6ImVuYWJsZWQiLCJMSU5LRURJTiI6ImVuYWJsZWQiLCJDT05GSUciOiJkaXNhYmxlZCJ9LCJ2ZXJzaW9uIjoiMi4wLjIyIiwic2NvcmUiOjIwMDIyMH1d" data-bs-offset="94" style="padding-top: 94px;">

<div id="quarto-search-results" bis_skin_checked="1"></div>
  <header id="quarto-header" class="headroom fixed-top headroom--not-bottom headroom--pinned headroom--top">
    <nav class="navbar navbar-expand-lg " data-bs-theme="dark">
      <div class="navbar-container container-fluid" bis_skin_checked="1">
      <div class="navbar-brand-container mx-auto" bis_skin_checked="1">
    <a class="navbar-brand" href="https://sigoiry.github.io/DISCOV-MicaSense/" data-original-href="https://sigoiry.github.io/DISCOV-MicaSense/index.html">
    <span class="navbar-title">DISCOV</span>
    </a>
  </div>
            <div id="quarto-search" class="type-overlay" title="Search" bis_skin_checked="1"><div class="aa-Autocomplete" role="combobox" aria-expanded="false" aria-haspopup="listbox" bis_skin_checked="1"><button type="button" class="aa-DetachedSearchButton"><div class="aa-DetachedSearchButtonIcon" bis_skin_checked="1"><svg class="aa-SubmitIcon" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M16.041 15.856c-0.034 0.026-0.067 0.055-0.099 0.087s-0.060 0.064-0.087 0.099c-1.258 1.213-2.969 1.958-4.855 1.958-1.933 0-3.682-0.782-4.95-2.050s-2.050-3.017-2.050-4.95 0.782-3.682 2.050-4.95 3.017-2.050 4.95-2.050 3.682 0.782 4.95 2.050 2.050 3.017 2.050 4.95c0 1.886-0.745 3.597-1.959 4.856zM21.707 20.293l-3.675-3.675c1.231-1.54 1.968-3.493 1.968-5.618 0-2.485-1.008-4.736-2.636-6.364s-3.879-2.636-6.364-2.636-4.736 1.008-6.364 2.636-2.636 3.879-2.636 6.364 1.008 4.736 2.636 6.364 3.879 2.636 6.364 2.636c2.125 0 4.078-0.737 5.618-1.968l3.675 3.675c0.391 0.391 1.024 0.391 1.414 0s0.391-1.024 0-1.414z"></path></svg></div><div class="aa-DetachedSearchButtonPlaceholder" bis_skin_checked="1"></div><div class="aa-DetachedSearchButtonQuery" bis_skin_checked="1"></div></button></div><div class="aa-Autocomplete" role="combobox" aria-expanded="false" aria-haspopup="listbox" aria-labelledby="autocomplete-0-label"><button type="button" class="aa-DetachedSearchButton"><div class="aa-DetachedSearchButtonIcon"><svg class="aa-SubmitIcon" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M16.041 15.856c-0.034 0.026-0.067 0.055-0.099 0.087s-0.060 0.064-0.087 0.099c-1.258 1.213-2.969 1.958-4.855 1.958-1.933 0-3.682-0.782-4.95-2.050s-2.050-3.017-2.050-4.95 0.782-3.682 2.050-4.95 3.017-2.050 4.95-2.050 3.682 0.782 4.95 2.050 2.050 3.017 2.050 4.95c0 1.886-0.745 3.597-1.959 4.856zM21.707 20.293l-3.675-3.675c1.231-1.54 1.968-3.493 1.968-5.618 0-2.485-1.008-4.736-2.636-6.364s-3.879-2.636-6.364-2.636-4.736 1.008-6.364 2.636-2.636 3.879-2.636 6.364 1.008 4.736 2.636 6.364 3.879 2.636 6.364 2.636c2.125 0 4.078-0.737 5.618-1.968l3.675 3.675c0.391 0.391 1.024 0.391 1.414 0s0.391-1.024 0-1.414z"></path></svg></div><div class="aa-DetachedSearchButtonPlaceholder"></div><div class="aa-DetachedSearchButtonQuery"></div></button></div></div>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" role="menu" aria-expanded="false" aria-label="Toggle navigation" onclick="if (window.quartoToggleHeadroom) { window.quartoToggleHeadroom(); }">
  <span class="navbar-toggler-icon"></span>
</button>
          <div class="collapse navbar-collapse" id="navbarCollapse" bis_skin_checked="1">
            <ul class="navbar-nav navbar-nav-scroll me-auto">
  <li class="nav-item">
    <a class="nav-link active" href="https://sigoiry.github.io/DISCOV-MicaSense/" aria-current="page" data-original-href="https://sigoiry.github.io/DISCOV-MicaSense/index.html"> 
<span class="menu-text">Home</span></a>
  </li>  
  <li class="nav-item">
    <a class="nav-link" href="https://sigoiry.github.io/DISCOV-MicaSense/about.html" data-original-href="https://sigoiry.github.io/DISCOV-MicaSense/about.html"> 
<span class="menu-text">About the model</span></a>
  </li>  
  <li class="nav-item">
    <a class="nav-link" href="https://sigoiry.github.io/DISCOV-MicaSense/DISCOV_Examples.html" data-original-href="https://sigoiry.github.io/DISCOV-MicaSense/DISCOV_Examples.html"> 
<span class="menu-text">DISCOV Example</span></a>
  </li>  
</ul>
          </div> <!-- /navcollapse -->
            <div class="quarto-navbar-tools" bis_skin_checked="1">
    <a href="https://github.com/SigOiry/DISCOV-MicaSense" title="" class="quarto-navigation-tool px-1" aria-label="" data-original-href="https://github.com/SigOiry/DISCOV-MicaSense"><i class="bi bi-github"></i></a>
  <a href="https://sigoiry.github.io/DISCOV-MicaSense/" class="quarto-color-scheme-toggle quarto-navigation-tool px-1" onclick="window.quartoToggleColorScheme(); return false;" title="Toggle dark mode" data-original-href="https://sigoiry.github.io/DISCOV-MicaSense/"><i class="bi"></i></a>
</div>
      </div> <!-- /container-fluid -->
    </nav>
</header>
<!-- content -->
<div id="quarto-content" class="quarto-container page-columns page-rows-contents page-layout-article page-navbar" bis_skin_checked="1" style="min-height: calc(-94px + 100vh);">
<!-- sidebar -->
<!-- margin-sidebar -->
    <div id="quarto-margin-sidebar" class="sidebar margin-sidebar" bis_skin_checked="1" style="top: 94px; max-height: calc(-94px + 100vh);">
        <nav id="TOC" role="doc-toc" class="toc-active">
    <h2 id="toc-title">On this page</h2>
   
  <ul>
  <li><a href="https://sigoiry.github.io/DISCOV-MicaSense/#input-and-output-of-the-model" id="toc-input-and-output-of-the-model" class="nav-link active" data-scroll-target="#input-and-output-of-the-model" data-original-href="https://sigoiry.github.io/DISCOV-MicaSense/#input-and-output-of-the-model">Input and Output of the model</a>
  <ul class="">
  <li><a href="https://sigoiry.github.io/DISCOV-MicaSense/#input" id="toc-input" class="nav-link" data-scroll-target="#input" data-original-href="https://sigoiry.github.io/DISCOV-MicaSense/#input">Input</a></li>
  <li><a href="https://sigoiry.github.io/DISCOV-MicaSense/#output" id="toc-output" class="nav-link" data-scroll-target="#output" data-original-href="https://sigoiry.github.io/DISCOV-MicaSense/#output">Output</a></li>
  </ul></li>
  <li><a href="https://sigoiry.github.io/DISCOV-MicaSense/#how-to-use-discov-1.0-on-your-data" id="toc-how-to-use-discov-1.0-on-your-data" class="nav-link" data-scroll-target="#how-to-use-discov-1.0-on-your-data" data-original-href="https://sigoiry.github.io/DISCOV-MicaSense/#how-to-use-discov-1.0-on-your-data">How to use DISCOV 1.0 on your data ?</a>
  <ul class="collapse">
  <li><a href="https://sigoiry.github.io/DISCOV-MicaSense/#windows" id="toc-windows" class="nav-link" data-scroll-target="#windows" data-original-href="https://sigoiry.github.io/DISCOV-MicaSense/#windows">Windows</a></li>
  <li><a href="https://sigoiry.github.io/DISCOV-MicaSense/#macos" id="toc-macos" class="nav-link" data-scroll-target="#macos" data-original-href="https://sigoiry.github.io/DISCOV-MicaSense/#macos">MACOS</a></li>
  </ul></li>
  </ul>
</nav>
    </div>
<!-- main -->
<main class="content" id="quarto-document-content">




<div class="quarto-about-jolla" bis_skin_checked="1">
  <img src="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/DISCOV_logo.png" class="about-image
  rounded " style="width: 400px;">
 <header id="title-block-header" class="quarto-title-block default">
<div class="quarto-title" bis_skin_checked="1">
<h1 class="title">DISCOV: The Intertidal Drone Classification Model for Micasense</h1>
</div>
<div class="quarto-title-meta" bis_skin_checked="1">
  </div>
</header><div id="hero-heading" bis_skin_checked="1">
<p>The Drone Intertidal Substrats Classification Of Vegetation (<strong>DISCOV</strong>) is a Neural Network classification model trained on a <strong>Micasense RedEdge-MX Dual</strong> multispectral drone camera.</p>
</div> 
  <hr class="about-sep">
   <div class="about-links" bis_skin_checked="1">
  <a href="https://github.com/SigOiry/DISCOV-MicaSense" class="about-link" rel="" target="" data-original-href="https://github.com/SigOiry/DISCOV-MicaSense">
    <i class="bi bi-github"></i>
     <span class="about-link-text">Github</span>
  </a>
</div>
</div>

<p>This repository complements a scientific paper published by Oiry et al.&nbsp;in The Journal of Photogrammetry and Remote Sensing (Under review).</p>
<p><img src="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/Micasense_Dual_MX.png" align="left" width="20%" title="Micasense RedEdge-MX Dual"></p>
<p><img src="file:///C:/Users/oirys/Documents/GitHub/PhD_Slides/Data/Part4/Discov_Site/DISCOV_%20The%20Intertidal%20Drone%20Classification%20Model%20for%20Micasense%20%E2%80%93%20DISCOV_files/Figure2.png" width="40%" align="right" title="Classes of the model"></p>
<p>DISCOV is designed to <strong>classify</strong> <strong>intertidal</strong> soft bottom sediments, such as mudflats and sandflats, as well as the <strong>vegetation</strong> typically found in these habitats. The primary objective of this model is to accurately distinguish between <strong>seagrasses</strong> and green macroalgae. This distinction presents a significant challenge in remote sensing for accurately classifying coastal habitats, owing to the similar pigment compositions of these two types of vegetation. In the image on the right, you can see the spectral signature for each vegetation class identified by the model.</p>
<section id="input-and-output-of-the-model" class="level2">
<h2 data-anchor-id="input-and-output-of-the-model">Input and Output of the model</h2>
<section id="input" class="level3">
<h3 data-anchor-id="input">Input</h3>
<p>DISCOV processes input from a multilayer TIFF file containing 10 spectral bands. Band 1 corresponds to the 444 nm band of the <strong>Micasense RedEdge-MX Dual</strong>, and Band 10 corresponds to the one at 840 nm. The model has been trained using pixels processed into reflectance by <a href="https://www.agisoft.com/" data-original-href="https://www.agisoft.com/">Agisoft Metashape V2.1.1</a>. The training pixels were encoded in 16-bit integers, with values ranging from 0 to 10,000.</p>
</section>
<section id="output" class="level3">
<h3 data-anchor-id="output">Output</h3>
<p>The version 1.0 of DISCOV gives has output a TIFF file with values ranging between 1 and 10:</p>
<ul>
<li><p><strong>1 - Microphytobenthos</strong>: Unicellular microalgae and/or Cyanobacteria that can colonize superficial sediments at low tide. They can form a biofilm covering several square kilometers. The primary class of microalgae forming these biofilms is Bacillariophyceae, commonly known as diatoms.</p></li>
<li><p><strong>2 - Chlorophyceae</strong>: Green algae from the genus <em>Ulva sp</em> stranded on the sediment. The model has primarily been trained on <em>Ulva lactuca</em>, <em>Ulva armoricana</em>, and <em>Ulva intestinalis</em> . Therefore, I am uncertain how the model will behave when encountering other types of Chlorophyceae outside of the Ulvophyceae class, such as <em>Caulerpa sp.</em>).</p></li>
<li><p><strong>3 - Magnoliopsida</strong>: Marine angiosperm of the genus <em>Nanozostera sp.</em> (syn. <em>Zostera sp.</em>). The model has been trained exclusively on pixels from <em>Nanozostera noltei</em> (syn. <em>Zostera noltei</em>).</p></li>
<li><p><strong>4 - Phaeophyceae</strong>: Brown macrolalgae, stranded on the sediment or oftenly attached to rocks. Mainly trained from pixels of the genus <em>Fucus sp.</em></p></li>
<li><p><strong>5 - Rhodophyceae</strong>: Red Algae. This class was trained with the fewest pixels in DISCOV V1.0, using only pixels from <em>Gracilaria sp.</em> (likely <em>Gracilaria vermiculophylla</em>) observed in the Ria de Aveiro coastal lagoon, Portugal.</p></li>
<li><p><strong>6 - Bare Sediment</strong>: The class is primarily trained on bare mud but also performs well on sand. It can be mistaken for Microphytobenthos because sometimes the bare mud contains a small amount of chlorophyll-a, which absorbs light around 668 nm.</p></li>
<li><p><strong>7 - Sun Glint</strong>: Depending on the solar angle at the time of the flight, some pixels receive specular reflections directly from the sun, leading to an overestimation of the pixel’s total reflectance and distorting the spectral shape. This ‘sun glint’ class has been trained to prevent pixels affected by glint from being incorrectly classified as a type of vegetation. When there is residual water on the surface of the sediment, the probability of encountering glinted pixels increases.</p></li>
<li><p><strong>8 - Water</strong>: When the water is shallow and has vegetation at the bottom, the spectral signature of the vegetation is slightly altered, especially in the infrared spectrum. This can lead to incorrect classification of the pixel. This class was primarily established to avoid such scenarios by ensuring that very shallow waters are correctly classified as water. It is also effective for deep waters.</p></li>
<li><p><strong>9 - NA</strong></p></li>
<li><p><strong>10 - NA</strong></p></li>
</ul>
</section>
</section>
<section id="how-to-use-discov-1.0-on-your-data" class="level2">
<h2 data-anchor-id="how-to-use-discov-1.0-on-your-data">How to use DISCOV 1.0 on your data ?</h2>
<p>The current repositories of DISCOV include Python code, used to train the model and make predictions on images, as well as R code used to update the training dataset with your own data and to plot the results of the predictions.</p>
<section id="windows" class="level3">
<h3 data-anchor-id="windows">Windows</h3>
<p>The first step is to install all the necessary software, if you haven’t done so already. You will need to have R and Conda installed on your computer. For <a href="https://docs.conda.io/en/latest/" data-original-href="https://docs.conda.io/en/latest/">Conda</a>, I recommend installing it directly through <a href="https://github.com/conda-forge/miniforge?tab=readme-ov-file" data-original-href="https://github.com/conda-forge/miniforge?tab=readme-ov-file">Conda-forge</a> using the Windows installer, which can be downloaded <a href="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Windows-x86_64.exe" data-original-href="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Windows-x86_64.exe">here</a>. R can be downloaded from this <a href="https://cran.r-project.org/mirrors.html" data-original-href="https://cran.r-project.org/mirrors.html">link</a>. I recommend using <a href="https://posit.co/download/rstudio-desktop/" data-original-href="https://posit.co/download/rstudio-desktop/">RStudio</a>, an integrated development environment specifically designed for R.</p>
<p>Alternatively to RStudio, you can use software like <a href="https://code.visualstudio.com/" data-original-href="https://code.visualstudio.com/">VS code</a> which allows you to edit and run code written in both R and Python within the same working environment. Once Conda is installed, open the terminal (Press windows + R and enter “cmd” to open the terminal). Typing <code>where conda</code> should give a reply. If at this step you have an error, check your conda installation.</p>
<p>Now you can clone the repositories using <a href="https://github.com/SigOiry/DISCOV-MicaSense/archive/refs/heads/main.zip" data-original-href="https://github.com/SigOiry/DISCOV-MicaSense/archive/refs/heads/main.zip">this link</a>. Save and extract it to a safe location. Once that is done, you can open the terminal in the folder by pressing the Ctrl key on your keyboard and right-clicking in the folder, then select ‘Open terminal’. Entering <code>conda env create -f environment.yml</code> will install the correct version of Python and all the dependencies needed for DISCOV to run.</p>
<p>If you encounter an error during the installation of pip dependencies, make sure you have <a href="https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=registry#enable-long-paths-in-windows-10-version-1607-and-later" data-original-href="https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=registry#enable-long-paths-in-windows-10-version-1607-and-later">enabled long path support in Windows</a>.</p>
<p>Once that’s done, you should be ready to work with the model. You can activate the environment by typing <code>conda activate NN_env</code> in the terminal, or by selecting the NN_env kernel in Visual Studio Code.</p>
</section>
<section id="macos" class="level3">
<h3 data-anchor-id="macos">MACOS</h3>
<p>The first step is to install all the necessary software, if you haven’t done so already. You will need to have R and Conda installed on your mac. For <a href="https://docs.conda.io/en/latest/" data-original-href="https://docs.conda.io/en/latest/">Conda</a>, I recommend installing it directly through <a href="https://github.com/conda-forge/miniforge?tab=readme-ov-file" data-original-href="https://github.com/conda-forge/miniforge?tab=readme-ov-file">Conda-forge</a> using the MacOSX installer, which can be downloaded <a href="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-x86_64.sh" data-original-href="https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-x86_64.sh">here</a>. To run this script, open the terminal by pressing Command + Space and navigate to the Downloads folder using the <code>ls</code> and <code>cd</code> commands. Then, run <code>sh Miniforge3-MacOSX-x86_64.sh</code> and follow the instructions. Once it’s complete, press ‘yes’ or execute <code>conda init</code> and close the Terminal.</p>
<p>R can be downloaded from this <a href="https://cran.r-project.org/mirrors.html" data-original-href="https://cran.r-project.org/mirrors.html">link</a>. I recommend using <a href="https://posit.co/download/rstudio-desktop/" data-original-href="https://posit.co/download/rstudio-desktop/">RStudio</a>, an integrated development environment specifically designed for R. Alternatively to RStudio, you can use software like <a href="https://code.visualstudio.com/" data-original-href="https://code.visualstudio.com/">VS code</a> which allows you to edit and run code written in both R and Python within the same working environment.</p>
<p>Once Conda is installed, open the terminal by pressing Command + Space and typing ‘terminal’. In the terminal, type <code>where conda</code> to check if it is installed correctly. If you receive a ‘conda not found’ message at this step, verify your Conda installation.</p>
<p>Now you can clone the repositories using <a href="https://github.com/SigOiry/DISCOV-MicaSense/archive/refs/heads/main.zip" data-original-href="https://github.com/SigOiry/DISCOV-MicaSense/archive/refs/heads/main.zip">this link</a>. Save and extract it to a safe location. Once that is done, you can open the terminal and navigate to the DISCOV-MicaSense folder using the <code>ls</code> and <code>cd</code> commands. Entering <code>conda env create -f environment_MACOSX.yml</code> will install the correct version of Python and all the dependencies needed for DISCOV to run.</p>
<p>Once that’s done, you should be ready to work with the model. You can activate the environment by typing <code>conda activate NN_env</code> in the terminal, or by selecting the NN_env kernel in Visual Studio Code.</p>



</section>
</section>

</main> <!-- /main -->
<script id="quarto-html-after-body" type="application/javascript">
window.document.addEventListener("DOMContentLoaded", function (event) {
  const toggleBodyColorMode = (bsSheetEl) => {
    const mode = bsSheetEl.getAttribute("data-mode");
    const bodyEl = window.document.querySelector("body");
    if (mode === "dark") {
      bodyEl.classList.add("quarto-dark");
      bodyEl.classList.remove("quarto-light");
    } else {
      bodyEl.classList.add("quarto-light");
      bodyEl.classList.remove("quarto-dark");
    }
  }
  const toggleBodyColorPrimary = () => {
    const bsSheetEl = window.document.querySelector("link#quarto-bootstrap");
    if (bsSheetEl) {
      toggleBodyColorMode(bsSheetEl);
    }
  }
  toggleBodyColorPrimary();  
  const disableStylesheet = (stylesheets) => {
    for (let i=0; i < stylesheets.length; i++) {
      const stylesheet = stylesheets[i];
      stylesheet.rel = 'prefetch';
    }
  }
  const enableStylesheet = (stylesheets) => {
    for (let i=0; i < stylesheets.length; i++) {
      const stylesheet = stylesheets[i];
      stylesheet.rel = 'stylesheet';
    }
  }
  const manageTransitions = (selector, allowTransitions) => {
    const els = window.document.querySelectorAll(selector);
    for (let i=0; i < els.length; i++) {
      const el = els[i];
      if (allowTransitions) {
        el.classList.remove('notransition');
      } else {
        el.classList.add('notransition');
      }
    }
  }
  const toggleGiscusIfUsed = (isAlternate, darkModeDefault) => {
    const baseTheme = document.querySelector('#giscus-base-theme')?.value ?? 'light';
    const alternateTheme = document.querySelector('#giscus-alt-theme')?.value ?? 'dark';
    let newTheme = '';
    if(darkModeDefault) {
      newTheme = isAlternate ? baseTheme : alternateTheme;
    } else {
      newTheme = isAlternate ? alternateTheme : baseTheme;
    }
    const changeGiscusTheme = () => {
      // From: https://github.com/giscus/giscus/issues/336
      const sendMessage = (message) => {
        const iframe = document.querySelector('iframe.giscus-frame');
        if (!iframe) return;
        iframe.contentWindow.postMessage({ giscus: message }, 'https://giscus.app');
      }
      sendMessage({
        setConfig: {
          theme: newTheme
        }
      });
    }
    const isGiscussLoaded = window.document.querySelector('iframe.giscus-frame') !== null;
    if (isGiscussLoaded) {
      changeGiscusTheme();
    }
  }
  const toggleColorMode = (alternate) => {
    // Switch the stylesheets
    const alternateStylesheets = window.document.querySelectorAll('link.quarto-color-scheme.quarto-color-alternate');
    manageTransitions('#quarto-margin-sidebar .nav-link', false);
    if (alternate) {
      enableStylesheet(alternateStylesheets);
      for (const sheetNode of alternateStylesheets) {
        if (sheetNode.id === "quarto-bootstrap") {
          toggleBodyColorMode(sheetNode);
        }
      }
    } else {
      disableStylesheet(alternateStylesheets);
      toggleBodyColorPrimary();
    }
    manageTransitions('#quarto-margin-sidebar .nav-link', true);
    // Switch the toggles
    const toggles = window.document.querySelectorAll('.quarto-color-scheme-toggle');
    for (let i=0; i < toggles.length; i++) {
      const toggle = toggles[i];
      if (toggle) {
        if (alternate) {
          toggle.classList.add("alternate");     
        } else {
          toggle.classList.remove("alternate");
        }
      }
    }
    // Hack to workaround the fact that safari doesn't
    // properly recolor the scrollbar when toggling (#1455)
    if (navigator.userAgent.indexOf('Safari') > 0 && navigator.userAgent.indexOf('Chrome') == -1) {
      manageTransitions("body", false);
      window.scrollTo(0, 1);
      setTimeout(() => {
        window.scrollTo(0, 0);
        manageTransitions("body", true);
      }, 40);  
    }
  }
  const isFileUrl = () => { 
    return window.location.protocol === 'file:';
  }
  const hasAlternateSentinel = () => {  
    let styleSentinel = getColorSchemeSentinel();
    if (styleSentinel !== null) {
      return styleSentinel === "alternate";
    } else {
      return false;
    }
  }
  const setStyleSentinel = (alternate) => {
    const value = alternate ? "alternate" : "default";
    if (!isFileUrl()) {
      window.localStorage.setItem("quarto-color-scheme", value);
    } else {
      localAlternateSentinel = value;
    }
  }
  const getColorSchemeSentinel = () => {
    if (!isFileUrl()) {
      const storageValue = window.localStorage.getItem("quarto-color-scheme");
      return storageValue != null ? storageValue : localAlternateSentinel;
    } else {
      return localAlternateSentinel;
    }
  }
  const darkModeDefault = false;
  let localAlternateSentinel = darkModeDefault ? 'alternate' : 'default';
  // Dark / light mode switch
  window.quartoToggleColorScheme = () => {
    // Read the current dark / light value 
    let toAlternate = !hasAlternateSentinel();
    toggleColorMode(toAlternate);
    setStyleSentinel(toAlternate);
    toggleGiscusIfUsed(toAlternate, darkModeDefault);
  };
  // Ensure there is a toggle, if there isn't float one in the top right
  if (window.document.querySelector('.quarto-color-scheme-toggle') === null) {
    const a = window.document.createElement('a');
    a.classList.add('top-right');
    a.classList.add('quarto-color-scheme-toggle');
    a.href = "";
    a.onclick = function() { try { window.quartoToggleColorScheme(); } catch {} return false; };
    const i = window.document.createElement("i");
    i.classList.add('bi');
    a.appendChild(i);
    window.document.body.appendChild(a);
  }
  // Switch to dark mode if need be
  if (hasAlternateSentinel()) {
    toggleColorMode(true);
  } else {
    toggleColorMode(false);
  }
  const isCodeAnnotation = (el) => {
    for (const clz of el.classList) {
      if (clz.startsWith('code-annotation-')) {                     
        return true;
      }
    }
    return false;
  }
  const onCopySuccess = function(e) {
    // button target
    const button = e.trigger;
    // don't keep focus
    button.blur();
    // flash "checked"
    button.classList.add('code-copy-button-checked');
    var currentTitle = button.getAttribute("title");
    button.setAttribute("title", "Copied!");
    let tooltip;
    if (window.bootstrap) {
      button.setAttribute("data-bs-toggle", "tooltip");
      button.setAttribute("data-bs-placement", "left");
      button.setAttribute("data-bs-title", "Copied!");
      tooltip = new bootstrap.Tooltip(button, 
        { trigger: "manual", 
          customClass: "code-copy-button-tooltip",
          offset: [0, -8]});
      tooltip.show();    
    }
    setTimeout(function() {
      if (tooltip) {
        tooltip.hide();
        button.removeAttribute("data-bs-title");
        button.removeAttribute("data-bs-toggle");
        button.removeAttribute("data-bs-placement");
      }
      button.setAttribute("title", currentTitle);
      button.classList.remove('code-copy-button-checked');
    }, 1000);
    // clear code selection
    e.clearSelection();
  }
  const getTextToCopy = function(trigger) {
      const codeEl = trigger.previousElementSibling.cloneNode(true);
      for (const childEl of codeEl.children) {
        if (isCodeAnnotation(childEl)) {
          childEl.remove();
        }
      }
      return codeEl.innerText;
  }
  const clipboard = new window.ClipboardJS('.code-copy-button:not([data-in-quarto-modal])', {
    text: getTextToCopy
  });
  clipboard.on('success', onCopySuccess);
  if (window.document.getElementById('quarto-embedded-source-code-modal')) {
    // For code content inside modals, clipBoardJS needs to be initialized with a container option
    // TODO: Check when it could be a function (https://github.com/zenorocha/clipboard.js/issues/860)
    const clipboardModal = new window.ClipboardJS('.code-copy-button[data-in-quarto-modal]', {
      text: getTextToCopy,
      container: window.document.getElementById('quarto-embedded-source-code-modal')
    });
    clipboardModal.on('success', onCopySuccess);
  }
    var localhostRegex = new RegExp(/^(?:http|https):\/\/localhost\:?[0-9]*\//);
    var mailtoRegex = new RegExp(/^mailto:/);
      var filterRegex = new RegExp('/' + window.location.host + '/');
    var isInternal = (href) => {
        return filterRegex.test(href) || localhostRegex.test(href) || mailtoRegex.test(href);
    }
    // Inspect non-navigation links and adorn them if external
 	var links = window.document.querySelectorAll('a[href]:not(.nav-link):not(.navbar-brand):not(.toc-action):not(.sidebar-link):not(.sidebar-item-toggle):not(.pagination-link):not(.no-external):not([aria-hidden]):not(.dropdown-item):not(.quarto-navigation-tool):not(.about-link)');
    for (var i=0; i<links.length; i++) {
      const link = links[i];
      if (!isInternal(link.href)) {
        // undo the damage that might have been done by quarto-nav.js in the case of
        // links that we want to consider external
        if (link.dataset.originalHref !== undefined) {
          link.href = link.dataset.originalHref;
        }
      }
    }
  function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {
    const config = {
      allowHTML: true,
      maxWidth: 500,
      delay: 100,
      arrow: false,
      appendTo: function(el) {
          return el.parentElement;
      },
      interactive: true,
      interactiveBorder: 10,
      theme: 'quarto',
      placement: 'bottom-start',
    };
    if (contentFn) {
      config.content = contentFn;
    }
    if (onTriggerFn) {
      config.onTrigger = onTriggerFn;
    }
    if (onUntriggerFn) {
      config.onUntrigger = onUntriggerFn;
    }
    window.tippy(el, config); 
  }
  const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
  for (var i=0; i<noterefs.length; i++) {
    const ref = noterefs[i];
    tippyHover(ref, function() {
      // use id or data attribute instead here
      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
      try { href = new URL(href).hash; } catch {}
      const id = href.replace(/^#\/?/, "");
      const note = window.document.getElementById(id);
      if (note) {
        return note.innerHTML;
      } else {
        return "";
      }
    });
  }
  const xrefs = window.document.querySelectorAll('a.quarto-xref');
  const processXRef = (id, note) => {
    // Strip column container classes
    const stripColumnClz = (el) => {
      el.classList.remove("page-full", "page-columns");
      if (el.children) {
        for (const child of el.children) {
          stripColumnClz(child);
        }
      }
    }
    stripColumnClz(note)
    if (id === null || id.startsWith('sec-')) {
      // Special case sections, only their first couple elements
      const container = document.createElement("div");
      if (note.children && note.children.length > 2) {
        container.appendChild(note.children[0].cloneNode(true));
        for (let i = 1; i < note.children.length; i++) {
          const child = note.children[i];
          if (child.tagName === "P" && child.innerText === "") {
            continue;
          } else {
            container.appendChild(child.cloneNode(true));
            break;
          }
        }
        if (window.Quarto?.typesetMath) {
          window.Quarto.typesetMath(container);
        }
        return container.innerHTML
      } else {
        if (window.Quarto?.typesetMath) {
          window.Quarto.typesetMath(note);
        }
        return note.innerHTML;
      }
    } else {
      // Remove any anchor links if they are present
      const anchorLink = note.querySelector('a.anchorjs-link');
      if (anchorLink) {
        anchorLink.remove();
      }
      if (window.Quarto?.typesetMath) {
        window.Quarto.typesetMath(note);
      }
      // TODO in 1.5, we should make sure this works without a callout special case
      if (note.classList.contains("callout")) {
        return note.outerHTML;
      } else {
        return note.innerHTML;
      }
    }
  }
  for (var i=0; i<xrefs.length; i++) {
    const xref = xrefs[i];
    tippyHover(xref, undefined, function(instance) {
      instance.disable();
      let url = xref.getAttribute('href');
      let hash = undefined; 
      if (url.startsWith('#')) {
        hash = url;
      } else {
        try { hash = new URL(url).hash; } catch {}
      }
      if (hash) {
        const id = hash.replace(/^#\/?/, "");
        const note = window.document.getElementById(id);
        if (note !== null) {
          try {
            const html = processXRef(id, note.cloneNode(true));
            instance.setContent(html);
          } finally {
            instance.enable();
            instance.show();
          }
        } else {
          // See if we can fetch this
          fetch(url.split('#')[0])
          .then(res => res.text())
          .then(html => {
            const parser = new DOMParser();
            const htmlDoc = parser.parseFromString(html, "text/html");
            const note = htmlDoc.getElementById(id);
            if (note !== null) {
              const html = processXRef(id, note);
              instance.setContent(html);
            } 
          }).finally(() => {
            instance.enable();
            instance.show();
          });
        }
      } else {
        // See if we can fetch a full url (with no hash to target)
        // This is a special case and we should probably do some content thinning / targeting
        fetch(url)
        .then(res => res.text())
        .then(html => {
          const parser = new DOMParser();
          const htmlDoc = parser.parseFromString(html, "text/html");
          const note = htmlDoc.querySelector('main.content');
          if (note !== null) {
            // This should only happen for chapter cross references
            // (since there is no id in the URL)
            // remove the first header
            if (note.children.length > 0 && note.children[0].tagName === "HEADER") {
              note.children[0].remove();
            }
            const html = processXRef(null, note);
            instance.setContent(html);
          } 
        }).finally(() => {
          instance.enable();
          instance.show();
        });
      }
    }, function(instance) {
    });
  }
      let selectedAnnoteEl;
      const selectorForAnnotation = ( cell, annotation) => {
        let cellAttr = 'data-code-cell="' + cell + '"';
        let lineAttr = 'data-code-annotation="' +  annotation + '"';
        const selector = 'span[' + cellAttr + '][' + lineAttr + ']';
        return selector;
      }
      const selectCodeLines = (annoteEl) => {
        const doc = window.document;
        const targetCell = annoteEl.getAttribute("data-target-cell");
        const targetAnnotation = annoteEl.getAttribute("data-target-annotation");
        const annoteSpan = window.document.querySelector(selectorForAnnotation(targetCell, targetAnnotation));
        const lines = annoteSpan.getAttribute("data-code-lines").split(",");
        const lineIds = lines.map((line) => {
          return targetCell + "-" + line;
        })
        let top = null;
        let height = null;
        let parent = null;
        if (lineIds.length > 0) {
            //compute the position of the single el (top and bottom and make a div)
            const el = window.document.getElementById(lineIds[0]);
            top = el.offsetTop;
            height = el.offsetHeight;
            parent = el.parentElement.parentElement;
          if (lineIds.length > 1) {
            const lastEl = window.document.getElementById(lineIds[lineIds.length - 1]);
            const bottom = lastEl.offsetTop + lastEl.offsetHeight;
            height = bottom - top;
          }
          if (top !== null && height !== null && parent !== null) {
            // cook up a div (if necessary) and position it 
            let div = window.document.getElementById("code-annotation-line-highlight");
            if (div === null) {
              div = window.document.createElement("div");
              div.setAttribute("id", "code-annotation-line-highlight");
              div.style.position = 'absolute';
              parent.appendChild(div);
            }
            div.style.top = top - 2 + "px";
            div.style.height = height + 4 + "px";
            div.style.left = 0;
            let gutterDiv = window.document.getElementById("code-annotation-line-highlight-gutter");
            if (gutterDiv === null) {
              gutterDiv = window.document.createElement("div");
              gutterDiv.setAttribute("id", "code-annotation-line-highlight-gutter");
              gutterDiv.style.position = 'absolute';
              const codeCell = window.document.getElementById(targetCell);
              const gutter = codeCell.querySelector('.code-annotation-gutter');
              gutter.appendChild(gutterDiv);
            }
            gutterDiv.style.top = top - 2 + "px";
            gutterDiv.style.height = height + 4 + "px";
          }
          selectedAnnoteEl = annoteEl;
        }
      };
      const unselectCodeLines = () => {
        const elementsIds = ["code-annotation-line-highlight", "code-annotation-line-highlight-gutter"];
        elementsIds.forEach((elId) => {
          const div = window.document.getElementById(elId);
          if (div) {
            div.remove();
          }
        });
        selectedAnnoteEl = undefined;
      };
        // Handle positioning of the toggle
    window.addEventListener(
      "resize",
      throttle(() => {
        elRect = undefined;
        if (selectedAnnoteEl) {
          selectCodeLines(selectedAnnoteEl);
        }
      }, 10)
    );
    function throttle(fn, ms) {
    let throttle = false;
    let timer;
      return (...args) => {
        if(!throttle) { // first call gets through
            fn.apply(this, args);
            throttle = true;
        } else { // all the others get throttled
            if(timer) clearTimeout(timer); // cancel #2
            timer = setTimeout(() => {
              fn.apply(this, args);
              timer = throttle = false;
            }, ms);
        }
      };
    }
      // Attach click handler to the DT
      const annoteDls = window.document.querySelectorAll('dt[data-target-cell]');
      for (const annoteDlNode of annoteDls) {
        annoteDlNode.addEventListener('click', (event) => {
          const clickedEl = event.target;
          if (clickedEl !== selectedAnnoteEl) {
            unselectCodeLines();
            const activeEl = window.document.querySelector('dt[data-target-cell].code-annotation-active');
            if (activeEl) {
              activeEl.classList.remove('code-annotation-active');
            }
            selectCodeLines(clickedEl);
            clickedEl.classList.add('code-annotation-active');
          } else {
            // Unselect the line
            unselectCodeLines();
            clickedEl.classList.remove('code-annotation-active');
          }
        });
      }
  const findCites = (el) => {
    const parentEl = el.parentElement;
    if (parentEl) {
      const cites = parentEl.dataset.cites;
      if (cites) {
        return {
          el,
          cites: cites.split(' ')
        };
      } else {
        return findCites(el.parentElement)
      }
    } else {
      return undefined;
    }
  };
  var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
  for (var i=0; i<bibliorefs.length; i++) {
    const ref = bibliorefs[i];
    const citeInfo = findCites(ref);
    if (citeInfo) {
      tippyHover(citeInfo.el, function() {
        var popup = window.document.createElement('div');
        citeInfo.cites.forEach(function(cite) {
          var citeDiv = window.document.createElement('div');
          citeDiv.classList.add('hanging-indent');
          citeDiv.classList.add('csl-entry');
          var biblioDiv = window.document.getElementById('ref-' + cite);
          if (biblioDiv) {
            citeDiv.innerHTML = biblioDiv.innerHTML;
          }
          popup.appendChild(citeDiv);
        });
        return popup.innerHTML;
      });
    }
  }
});
</script>
</div> <!-- /content -->




</body></html>