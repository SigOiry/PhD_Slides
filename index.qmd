---
format:
  revealjs:
    transition: slide
    theme:
      - default
      - style.scss
    footer: ""
    width: 2400
    height: 1350
    auto-animate: true
    auto-play-media: true
    backgroundTransition: fade
    controls: false
    slide-number: true
    include-after-body: moving-text.js
    # includes:
    #   before_body: custom.js
    simplemenu:
        barhtml:
            header: "<div class='menubar'></a><ul class='menu'></ul><div class='slide-number'></div><div>"
        scale: 0.8
revealjs-plugins:
  - simplemenu
editor_options: 
  chunk_output_type: console
---

```{r library}
#| cache: true
#| echo: false
#| eval: true
#| warning: false

library(tidyverse)
library(Utilities.Package)
library(sf) 
library(rnaturalearth) 
library(rnaturalearthdata) 
library(rnaturalearthhires)
library(leaflet)
library("leaflet.extras")
```


```{r update gitignore}
#| cache: true
#| echo: false
#| warning: false
#| eval: false

library(fs)

# Define the size threshold in bytes (100 MB)
size_threshold <- 100 * 1024 * 1024

# Get a list of all files in the repository
files <- dir_ls(path = "Slides", recurse = TRUE, type = "file")

# Filter files larger than the size threshold
large_files <- files[file_info(files)$size > size_threshold]

# Check if there are large files
if (length(large_files) > 0) {
  # Read the existing .gitignore file if it exists
  gitignore_path <- ".gitignore"
  gitignore_content <- if (file_exists(gitignore_path)) {
    readLines(gitignore_path)
  } else {
    character(0)
  }
  
  # Identify files not already in .gitignore
  files_to_add <- large_files[!large_files %in% gitignore_content]
  
  # Append new large files to .gitignore
  if (length(files_to_add) > 0) {
    writeLines(c(gitignore_content, files_to_add), gitignore_path)
    message(length(files_to_add), " file(s) added to .gitignore.")
  } else {
    message("No new files to add to .gitignore.")
  }
} else {
  message("No files larger than 100 MB found.")
}
```


## {.hide data-state="hide-menubar"}

::: {.gradient_box style="text-align: center; position: absolute; left: 50%; top: 22%; width: 1800px; transform: translate(-50%, -50%)"}
[PhD Thesis Presentation]{style="color: black; font-size: 80px; font-weight: bold; line-height: 1em; margin: 0px; text-align: justify-all;"}
:::

::: {.gradient_box style="text-align: center; position: absolute; left: 50%; top: 37%; width: 1800px; transform: translate(-50%, -50%)"}
[Characterization of Intertidal Vegetation on European Coasts Using MultiScale Remote Sensing in Response to Natural and Anthropogenic Pressures]{style="color: black; font-size: 60px; line-height: 1em; margin: 0px; text-align: justify-all;"}
:::

<!-- ::: {style="text-align: left; position: absolute; left: 25%; top: 50%; width: 1200px; transform: translate(-50%, -50%)"} -->
<!-- [Date & Time:]{style="color: black; font-size: 35px; font-weight: bold;"} -->
<!-- ::: -->
::: {style="text-align: left; position: absolute; right: 0%; top: 93%; transform: translate(-50%, -50%)"}
[The 15th of May 2025]{style="color: black; font-size: 50px;"}
:::

<!-- ::: {style="text-align: left; position: absolute; left: 25%; top: 53%; width: 1200px; transform: translate(-50%, -50%)"} -->
<!-- [Location: ]{style="color: black; font-size: 35px; font-weight: bold;"} -->
<!-- ::: -->
<!-- ::: {style="text-align: left; position: absolute; left: 40%; top: 53%; width: 1200px; transform: translate(-50%, -50%)"} -->
<!-- [Amphitéatre Pasteur, Nantes Université (France)]{style="color: black; font-size: 35px;"} -->
<!-- ::: -->

::: {style="text-align: left; position: absolute; left: 25%; top: 50%; width: 1200px; transform: translate(-50%, -50%)"}
[Thesis supervisor: ]{style="color: black; font-size: 35px; font-weight: bold;"}
:::
::: {style="text-align: left; position: absolute; left: 40%; top: 50%; width: 1200px; transform: translate(-50%, -50%)"}
[Laurent Barillé, Professor]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 25%; top: 53%; width: 1200px; transform: translate(-50%, -50%)"}
[Co-supervisor: ]{style="color: black; font-size: 35px; font-weight: bold;"}
:::
::: {style="text-align: left; position: absolute; left: 40%; top: 53%; width: 1200px; transform: translate(-50%, -50%)"}
[Pierre Gernez, Lecturer]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 25%; top: 59%; width: 1200px; transform: translate(-50%, -50%)"}
[Jury members:]{style="color: black; font-size: 35px; font-weight: bold;"}
:::

::: {style="text-align: left; position: absolute; left: 28%; top: 64%; width: 1200px; transform: translate(-50%, -50%)"}
[Antoine Collin]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 28%; top: 69%; width: 1200px; transform: translate(-50%, -50%)"}
[Rodney Forster]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 28%; top: 74%; width: 1200px; transform: translate(-50%, -50%)"}
[Evangelos Spyrakos]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 28%; top: 79%; width: 1200px; transform: translate(-50%, -50%)"}
[Bárbara Ondiviela]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 28%; top: 84%; width: 1200px; transform: translate(-50%, -50%)"}
[Federica Braga]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 28%; top: 89%; width: 1200px; transform: translate(-50%, -50%)"}
[Laurent Barillé]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 28%; top: 94%; width: 1200px; transform: translate(-50%, -50%)"}
[Pierre Gernez]{style="color: black; font-size: 35px;"}
:::


::: {style="text-align: left; position: absolute; left: 43%; top: 64%; width: 1200px; transform: translate(-50%, -50%)"}
[Lecturer]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 43%; top: 69%; width: 1200px; transform: translate(-50%, -50%)"}
[Professor]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 43%; top: 74%; width: 1200px; transform: translate(-50%, -50%)"}
[Professor]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 43%; top: 79%; width: 1200px; transform: translate(-50%, -50%)"}
[Senior scientist]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 43%; top: 84%; width: 1200px; transform: translate(-50%, -50%)"}
[Senior Researcher]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 43%; top: 89%; width: 1200px; transform: translate(-50%, -50%)"}
[Professor]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 43%; top: 94%; width: 1200px; transform: translate(-50%, -50%)"}
[Lecturer]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 58%; top: 64%; width: 1200px; transform: translate(-50%, -50%)"}
[École Pratique des Hautes Études (EPHE), Dinard, France]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 58%; top: 69%; width: 1200px; transform: translate(-50%, -50%)"}
[University of Hull, United Kingdom]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 58%; top: 74%; width: 1200px; transform: translate(-50%, -50%)"}
[University of Stirling, United Kingdom]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 58%; top: 79%; width: 1200px; transform: translate(-50%, -50%)"}
[Universidad de Cantabria, Spain]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 58%; top: 84%; width: 1200px; transform: translate(-50%, -50%)"}
[CNR-ISMAR, Venice, Italy]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 58%; top: 89%; width: 1200px; transform: translate(-50%, -50%)"}
[Nantes Université, France]{style="color: black; font-size: 35px;"}
:::

::: {style="text-align: left; position: absolute; left: 58%; top: 94%; width: 1200px; transform: translate(-50%, -50%)"}
[Nantes Université, France]{style="color: black; font-size: 35px;"}
:::


::: {.absolute top="65%" right="-10%" style="transform: translate(-50%, -50%);"}
![](Images/Profile_SImon.png){height="600"}
:::

::: {.gradient_box style="text-align: center; position: absolute; right: -3%; top: 86%; width: 500px; transform: translate(-50%, -50%)"}
[Simon Oiry]{style="color: black; font-size: 60px; line-height: 1em; margin: 0px; text-align: justify-all;"}
:::

::: {.absolute top="10%" left="5%" style="transform: translate(-50%, -50%);"}
![](Images/nantes-universite.png){height="300"}
:::

::: {.absolute top="10%" right="-5%" style="transform: translate(-50%, -50%);"}
![](Images/rsbe2.png){height="300"}
:::

::: {.absolute top="10%" left="50%" style="transform: translate(-50%, -50%);"}
![](Images/LogoED.png){height="150"}
:::

## Preface {data-state="hide-menubar"}

::: {.notes}
Between 2021 & 2024

BiCOME: Developing tools for biodiversity monitoring

REWRITE: Ongoing, Founded by Europe, Rewilding of intertidal areas accross Europe

InvaSea: Ongoing, Mapping of Invasive macroalgae, focusing on *G. vermiculophylla*

:::

::: {.fragment .fade-out fragment-index="2"}
::: {.absolute bottom="0%" left="0%"}
![](Images/Preface/Photo_Labo.jpg){height="1200"}
:::

::: {.absolute top="3%" right="0%"}
![](Images/Preface/logo_footer_UN.png){height="200"}
:::

::: {.absolute top="0%" left="30%" }
![](Images/Preface/Boutons_Laboratoires_Isomer.png){height="300"}
:::



::: {.absolute style="text-align: center; position: absolute; left: 48%; top: 47%; width: 1000px; transform: translate(-50%, -50%)"}
[Remote Sensing, Benthic Ecology and Ecotoxicology]{style="color: black; font-size: 80px; font-weight: bold; line-height: 1em; margin: 0px; text-align: justify-all;"}
:::

::: {.absolute top="25%" right="0%" }
![](Images/Preface/rsbe2.png){height="500"}
:::

::: {.absolute left="25%" top="65%" style="font-size: 50px; width: 900px;"}
- Benthic ecology and shellfish aquaculture
- Biodiversity of benthic primary producers
- Hyperspectral, multispectral and drone remote sensing
:::

::: {.absolute right="-5%" top="65%" style="font-size: 50px; width: 900px;"}
- Ecotoxicology and emerging pollutants
- Marine optics and ocean colour remote sensing
:::
:::

::: {.watercolor-container .fragment .fade-in fragment-index="2"}

![](Images/Preface/Watercolor_background.png){.watercolor-img}

::: {.watercolor-text}
PhD related projects
:::

:::

::: {.absolute .fragment .fade-in fragment-index="3" left="2%" top="0%" style="opacity: 0.2;"}

![](Images/Preface/Watercolor_background_green.png){height="1200"}
:::

::: {.absolute .fragment .fade-in fragment-index="3" left="1%" top="2%" style="z-index: -1;"}

![](Images/Others/BiCOME Logo.png){height="300"}
:::

::: {.absolute .fragment .fade-in fragment-index="3" left="12%" top="10%" style="font-size: 50px;"}
BiCOME Project
:::

::: {.absolute .fragment .fade-in fragment-index="3" left="15%" top="15%" style="font-size: 30px;"}
2021-2024
:::

::: {.absolute .fragment .fade-in fragment-index="3" width="600" left="5%" top="25%" style="font-size: 40px;"}
- Develop Observation tools
- Assess impacts of land/sea use, pollution and climate change
- identify regions of resilience or sensitivity
:::

::: {.absolute .fragment .fade-in fragment-index="3" left="10%" top="52%" style="font-size: 40px;"}
Project funded by:
:::

::: {.absolute .fragment .fade-in fragment-index="3" left="11%" top="55%"}
![](Images/Preface/ESA_Logo.png){height="350"}
:::


::: {.absolute .fragment .fade-in fragment-index="4" right="0%" top="0%" style="opacity: 0.2;"}

![](Images/Preface/Watercolor_background_yellow.png){height="1200"}
:::

::: {.absolute .fragment .fade-in fragment-index="4" right="-2%" top="2%"}

![](Images/Preface/rewrite-logo.png){height="100"}
:::

::: {.absolute .fragment .fade-in fragment-index="4" right="12%" top="10%" style="font-size: 50px;"}
REWRITE Project
:::

::: {.absolute .fragment .fade-in fragment-index="4" right="15%" top="15%" style="font-size: 30px;"}
2024-Actual
:::

::: {.absolute .fragment .fade-in fragment-index="4" width="600" right="5%" top="25%" style="font-size: 40px;"}
Aims to revitalize Europe's intertidal areas through rewilding, promoting climate resilience, biodiversity, and societal benefits along the European shoreline.
:::

::: {.absolute .fragment .fade-in fragment-index="4" right="10%" top="50%" style="font-size: 40px;"}
Project funded by:
:::

::: {.absolute .fragment .fade-in fragment-index="4" right="9%" top="55%"}
![](Images/Preface/EU_Logo.png){height="180"}
:::

::: {.absolute .fragment .fade-in fragment-index="5" left="30%" bottom="0%" style="opacity: 0.2;"}

![](Images/Preface/Watercolor_background_red.png){height="650"}
:::

::: {.absolute .fragment .fade-in fragment-index="5" left="30%" top="52%" style="font-size: 50px;"}
InvaSea Project
:::

::: {.absolute .fragment .fade-in fragment-index="5" left="33%" top="57%" style="font-size: 30px;"}
2024-Actual
:::

::: {.absolute .fragment .fade-in fragment-index="5" width="800" left="35%" top="62%" style="font-size: 40px;"}
- Assessing the Capacity of Remote Sensing to Map Invasive Red Algae
- Mapping *G. vermiculophylla* along the French coastline
:::

::: {.absolute .fragment .fade-in fragment-index="5" left="30%" top="80%" style="font-size: 40px;"}
Project funded by:
:::

::: {.absolute .fragment .fade-in fragment-index="5" left="50%" top="75%"}
![](Images/Preface/cnes_logo.png){height="300"}
:::

<!-- - thesis took place in ISOMER Nantes between 2021 and 2024 -->
<!-- - It has been found by the french government blabla -->
<!-- - It was closely related to a ESA founded project called BiCOME -->


## Table of Contents {.toc-page data-state="hide-menubar"}
<!-- <ul class="menu"></ul> -->
- [Introduction](#introduction)
- [Challenges and Solutions](#developing-advanced-methodologies-for-intertidal-vegetation-monitoring)
    - From Hyperspectral to Multispectral Resolution
    - Building of a Neural Network model for Intertidal Vegetation Mapping (DISCOV) 
- [Invasive Species](#case-study-1-facing-biological-invasions)
- [Marine Heatwaves](#case-study-2-mapping-the-impact-of-heatwaves-on-intertidal-seagrasses)
- [Discussion](#discussion-and-overview)



# Introduction {data-stack-name="Introduction" background-image="Images/Intro/title_background.png"}
- [Coastal Environments](#coastal-environments)
- [Human Activities](#human-activities)
- [Environmental Impacts](#environmental-impacts)
- [Interidal Habitats](#intertidal-habitats)
- [Remote Sensing](#remote-sensing) 
- [Objectives of this work](#objectives-of-this-work)

## Coastal Environments

::: {.absolute top="6.5%"}
*Areas where the land masses meet the seas*
:::

::: {.notes}
1st: Map of Brittany, North West of France
2nd: Map of Bourgneuf Bay, near Nantes

:::

```{r map dens_pop}
#| cache: true
#| echo: false
#| eval: false
#| warning: false

library(sf)
library(tidyverse)

TDC <- read_sf("Data/Intro/Trait_de_cote.shp")
coms <- read_sf("Data/Intro/commune.shp")
coms_buf_50km <- read_sf("Data/Intro/Coms_50km.shp")
coms_buf_25km <- read_sf("Data/Intro/Coms_25km.shp")

TDC_buf <- st_buffer(TDC, dist = 10)

x_ref <- 403256
y_ref <- 6511916

#### COMS ####
centroids <- st_centroid(coms)
coords <- st_coordinates(centroids)
top_left <- coords[,1] < x_ref & coords[,2] > y_ref
coms_cropped <- coms[top_left, ]

#### COMS 50km####
centroids <- st_centroid(coms_buf_50km)
coords <- st_coordinates(centroids)
top_left <- coords[,1] < x_ref & coords[,2] > y_ref
coms_50km_cropped <- coms_buf_50km[top_left, ]

#### COMS 25km####
centroids <- st_centroid(coms_buf_25km)
coords <- st_coordinates(centroids)
top_left <- coords[,1] < x_ref & coords[,2] > y_ref
coms_25km_cropped <- coms_buf_25km[top_left, ]

if(file.exists("Data/Intro/Coms_on_the_sea.shp")){
  Coms_on_the_sea<- read_sf("Data/Intro/Coms_on_the_sea.shp")

}else{
  intersects <- st_intersects(coms_cropped, TDC_buf, sparse = FALSE)
  Coms_on_the_sea <- coms_cropped[apply(intersects, 1, any), ]
  
  write_sf(Coms_on_the_sea.shp, "Data/Intro/Coms_on_the_sea.shp")  
}


nantes_lonlat <- st_sfc(st_point(c(-1.5536, 47.2184)), crs = 4326)
nantes_l93 <- st_transform(nantes_lonlat, crs = 2154)  # Lambert-93


plot_France <- ggplot() +
  geom_sf(data = coms_cropped, fill = "#89a979", color = "#89a979") + 
    geom_sf(data = nantes_l93, fill = "red", color = "black",shape = 21,size = 8) +
# original polygons (lighter)
  # geom_sf(data = intersecting_polygons, fill = "#6e8962", color = "#6e8962") + 
  # selected polygons
  coord_sf(expand = F)+
  theme_void()

plot_coms_by_the_sea <- ggplot() +
  geom_sf(data = coms_cropped, fill = "#89a979", color = "#89a979") +  # original polygons (lighter)
  geom_sf(data = Coms_on_the_sea, fill = "#596f50", color = "#596f50") + 
  geom_sf(data = nantes_l93, fill = "red", color = "black",shape = 21,size = 8) +

  # selected polygons
  coord_sf(expand = F)+
  theme_void()

colscale <- c("50km" = "#7f9a6f", "25km" = "#739069", "0km"="#596f50" )

plot_bands <- ggplot() +
  geom_sf(data = coms_cropped, fill = "#89a979", color = "#89a979") +  
  geom_sf(data = coms_50km_cropped, aes(fill = "50km", color = "50km"),show.legend = F) + 
  geom_sf(data = coms_25km_cropped, aes(fill = "25km", color = "25km"),show.legend = F) + 
  geom_sf(data = Coms_on_the_sea, aes(fill = "0km", color = "0km"),show.legend = F) +
  scale_fill_manual(values = colscale)+
  scale_color_manual(values = colscale)+
  geom_sf(data = nantes_l93, fill = "red", color = "black",shape = 21,size = 8) +

  # selected polygons
  coord_sf(expand = F)+
  theme_void()

ggsave("Images/Intro/Coms_France.png", plot_France, height=1350*4, width = 950*4, units = "px")

ggsave("Images/Intro/Coms_by_the_Sea.png", plot_coms_by_the_sea, height=1350*4, width = 950*4, units = "px")

ggsave("Images/Intro/Coms_bands.png", plot_bands, height=1350*4, width = 950*4, units = "px")

dens_pop_map <- ggplot() +
  geom_sf(data = coms_cropped, aes(color = dens_pop, fill = dens_pop)) +
  # scale_fill_manual(values = colscale)+
  # scale_color_manual(values = colscale)+
  geom_sf(data = nantes_l93, fill = "red", color = "black",shape = 21,size = 8) +
  # tidyterra::scale_fill_grass_c(palette = "batlow", use_grass_range = F,limits = c(1, 6000), trans = "log10")+
  # tidyterra::scale_color_grass_c(palette = "batlow", use_grass_range = F,limits = c(1, 6000), trans = "log10")+
  scico::scale_fill_scico(name = "People/km²",palette = "vik", limits = c(1, 4000), trans = "log10")+
  scico::scale_color_scico(name = "People/km²",palette = "vik", limits = c(1, 4000), trans = "log10")+
  # selected polygons
  coord_sf(expand = F)+
  theme_void() +
  theme(
    legend.position = c(0.25, 0.25),
    legend.key.height = unit(2, "cm"),    # taller legend
    legend.text = element_text(size = 20),  # bigger numbers
    legend.title = element_text(size = 22, face = "bold") # bigger title
  )

ggsave("Images/Intro/dens_pop_map.png", dens_pop_map, height=1350*4, width = 950*4, units = "px")

```

::: {.fragment .fade-out fragment-index="3"}
::: {.absolute bottom="-3%" right="-11%"}
![](Images/Intro/Coms_France.png){height="1350"}
:::
:::

::: {.absolute bottom="-3%" right="-11%" .fragment .fade-in-then-out fragment-index="1"}
![](Images/Intro/Coms_by_the_Sea.png){height="1350"}
:::

::: {.absolute bottom="-3%" right="-11%" .fragment .fade-in-then-out fragment-index="2"}
![](Images/Intro/Coms_bands.png){height="1350"}
:::

::: {.absolute bottom="-3%" right="-11%" .fragment .fade-in fragment-index="3"}
![](Images/Intro/dens_pop_map.png){height="1350"}
:::

::: {.absolute bottom="3%" left="5%" .fragment .fade-in fragment-index="4"}
![](Images/Intro/CoastalPopulation.png){height="700"}
:::

::: {.fragment .fade-out fragment-index="3"}
::: {.absolute .fragment .fade-in fragment-index="1" left="10%" top="15%" style="font-size: 50px; width: 900px; color: #596f50;"}
- Directly in contact with the sea
:::

::: {.absolute .fragment .fade-in fragment-index="2" left="10%" top="21%" style="font-size: 50px; width: 900px; color: #739069;"}
- 25km away from the sea
:::

::: {.absolute .fragment .fade-in fragment-index="2" left="10%" top="27%" style="font-size: 50px; width: 900px; color: #7f9a6f;"}
- 50km away from the sea
:::
:::

::: {.absolute left="0%" top="15%" .fragment .fade-in fragment-index="3" style="font-size: 50px;"}
-   French Coast are densly populated:
:::

::: {.absolute .fragment .fade-in fragment-index="3" left="10%" top="21%" style="font-size: 40px;"}
-   4% of the french territory
:::

::: {.absolute .fragment .fade-in fragment-index="3" left="10%" top="27%" style="font-size: 40px;"}
-   10% of the french population
:::

::: {.absolute left="0%" top="35%" .fragment .fade-in fragment-index="4" style="font-size: 50px;"}
-   Globaly: 
:::

::: {.absolute left="30%" bottom="0%" .fragment .fade-in fragment-index="4" style="font-size: 30px;"}
*Source:* [*Cosby et al. (2024)*](https://doi.org/10.1038/s41598-024-73287-x) *,* [*Reimann et al., (2023)*](https://doi.org/10.1017/cft.2023.3) 
:::

::: {.absolute left="30%" bottom="45%" .fragment .fade-in fragment-index="4" style="font-size: 40px;"}
1 billion people (15%) within 10km (4%)
:::

::: {.absolute left="30%" bottom="40%" .fragment .fade-in fragment-index="4" style="font-size: 40px;"}
~3 billion by 2100
:::

## Human activities {data-transition="fade"}

::: {.absolute top="6.5%"}
*Hotspots of Economic Growth*
:::


::: {.notes}

These economic activities also come with environmental costs, impacting habitats, water quality, and marine life
:::

::: {.absolute right="0%" top="0%" style="font-size: 30px; color: black; z-index: 9999;"}
[*source: developpement-durable.gouv.fr*](https://www.geolittoral.developpement-durable.gouv.fr/telechargement-en-ligne-donnees-geolittoral-a802.html)
:::

```{r maps coastal activities}
#| cache: true
#| echo: false
#| eval: false
#| warning: false

library(sf)
library(tidyverse)

coms <- read_sf("Data/Intro/commune.shp")


# Create bounding box as an sf object
bbox <- st_as_sfc(st_bbox(c(xmin = 252579, xmax = 323049,
                            ymin = 6655218, ymax = 6708566),
                          crs = st_crs(coms)))
cropped_coms <- st_intersection(coms, bbox)

dragage <- read_sf("Data/Intro/N_zones_homogenes_dragage_S_metropole_EPSG2154.shp")%>% 
  st_transform(st_crs(cropped_coms)) %>% 
  st_intersection(bbox) 

Port <- read_sf("Data/Intro/N_carenage_P_epsg3857_20220630.shp") %>% 
  st_transform(st_crs(cropped_coms))%>% 
  st_intersection(bbox) 

Immersion_sed <- read_sf("Data/Intro/N_immersion_S_metropole_epsg2154_2005-2020.shp") %>% 
  st_transform(st_crs(cropped_coms))%>% 
  st_intersection(bbox) 

Aquaculture <- read_sf("Data/Intro/cadastre_emprise_2025.shp") %>% 
  st_transform(st_crs(cropped_coms))%>% 
  st_intersection(bbox)

Eol <- read_sf("Data/Intro/parc_emr_autorise_en_projet.shp") %>% 
  st_transform(st_crs(cropped_coms))%>% 
  st_intersection(bbox)

Ouvrage <- read_sf("Data/Intro/N_ouvrages_littoraux_metropole_epsg2154_L.shp") %>% 
  st_transform(st_crs(cropped_coms))%>% 
  st_intersection(bbox)
  
# Crop the polygon with the bounding box

plot <- ggplot() +
  geom_sf(data = cropped_coms, fill = "#89a979", color = "#89a979") + 
    # geom_sf(data = nantes_l93, fill = "red", color = "black",shape = 21,size = 8) +
# original polygons (lighter)
  # geom_sf(data = intersecting_polygons, fill = "#6e8962", color = "#6e8962") + 
  # selected polygons
  coord_sf(expand = F)+
  theme_void()

ggsave("Images/Intro/Map_BB.png", plot, width = 10, height=8.12, dpi=150)


plot_port <- ggplot() +
  geom_sf(data = cropped_coms, fill = "#89a979", color = "#89a979") +
  geom_sf(data = Port, color = "darkred") +
    # geom_sf(data = nantes_l93, fill = "red", color = "black",shape = 21,size = 8) +
# original polygons (lighter)
  # geom_sf(data = intersecting_polygons, fill = "#6e8962", color = "#6e8962") + 
  # selected polygons
  coord_sf(expand = F)+
  theme_void()

ggsave("Images/Intro/Map_BB_port.png", plot_port, width = 10, height=8.12, dpi=150)


plot_dragage <- ggplot() +
  geom_sf(data = cropped_coms, fill = "#89a979", color = "#89a979") +
  geom_sf(data = Port, color = "darkred") +
  geom_sf(data = dragage, color = "goldenrod3", fill = "goldenrod3") +
  geom_sf(data = Immersion_sed, color = "goldenrod3", fill = "goldenrod3") +

    # geom_sf(data = nantes_l93, fill = "red", color = "black",shape = 21,size = 8) +
# original polygons (lighter)
  # geom_sf(data = intersecting_polygons, fill = "#6e8962", color = "#6e8962") + 
  # selected polygons
  coord_sf(expand = F)+
  theme_void()

ggsave("Images/Intro/Map_BB_dragage.png", plot_dragage, width = 10, height=8.12, dpi=150)

plot_aquaculture <- ggplot() +
  geom_sf(data = cropped_coms, fill = "#89a979", color = "#89a979") +
  geom_sf(data = Port, color = "darkred") +
  geom_sf(data = dragage, color = "goldenrod3", fill = "goldenrod3") +
  geom_sf(data = Immersion_sed, color = "goldenrod3", fill = "goldenrod3") +
  geom_sf(data = Aquaculture, color = "darkblue", fill = "darkblue") +

    # geom_sf(data = nantes_l93, fill = "red", color = "black",shape = 21,size = 8) +
# original polygons (lighter)
  # geom_sf(data = intersecting_polygons, fill = "#6e8962", color = "#6e8962") + 
  # selected polygons
  coord_sf(expand = F)+
  theme_void()

ggsave("Images/Intro/Map_BB_Aquaculture.png", plot_aquaculture, width = 10, height=8.12, dpi=150)

plot_Eol <- ggplot() +
  geom_sf(data = cropped_coms, fill = "#89a979", color = "#89a979") +
  geom_sf(data = Port, color = "darkred") +
  geom_sf(data = dragage, color = "goldenrod3", fill = "goldenrod3") +
  geom_sf(data = Immersion_sed, color = "goldenrod3", fill = "goldenrod3") +
  geom_sf(data = Aquaculture, color = "darkblue", fill = "darkblue") +
  geom_sf(data = Eol, color = "darkgreen", fill = "darkgreen") +

    # geom_sf(data = nantes_l93, fill = "red", color = "black",shape = 21,size = 8) +
# original polygons (lighter)
  # geom_sf(data = intersecting_polygons, fill = "#6e8962", color = "#6e8962") + 
  # selected polygons
  coord_sf(expand = F)+
  theme_void()

ggsave("Images/Intro/Map_BB_Eol.png", plot_Eol, width = 10, height=8.12, dpi=150)

plot_ouvrage <- ggplot() +
  geom_sf(data = cropped_coms, fill = "#89a979", color = "#89a979") +
  geom_sf(data = Port, color = "darkred") +
  geom_sf(data = dragage, color = "goldenrod3", fill = "goldenrod3") +
  geom_sf(data = Immersion_sed, color = "goldenrod3", fill = "goldenrod3") +
  geom_sf(data = Aquaculture, color = "darkblue", fill = "darkblue") +
  geom_sf(data = Eol, color = "darkgreen", fill = "darkgreen") +
  geom_sf(data = Ouvrage, color = "black", fill = "black", linewidth = 2) +

    # geom_sf(data = nantes_l93, fill = "red", color = "black",shape = 21,size = 8) +
# original polygons (lighter)
  # geom_sf(data = intersecting_polygons, fill = "#6e8962", color = "#6e8962") + 
  # selected polygons
  coord_sf(expand = F)+
  theme_void()

ggsave("Images/Intro/Map_BB_ouvrage.png", plot_ouvrage, width = 10, height=8.12, dpi=150)


```

::: {.absolute bottom="-6%" right="-11%"}
![](Images/Intro/Map_BB.png){height="1400"}
:::

::: {.absolute bottom="-6%" right="-11%" .fragment .fade-in-then-out fragment-index="1"}
![](Images/Intro/Map_BB_port.png){height="1400"}
:::

::: {.absolute bottom="-6%" right="-11%" .fragment .fade-in-then-out fragment-index="2"}
![](Images/Intro/Map_BB_dragage.png){height="1400"}
:::

::: {.absolute bottom="-6%" right="-11%" .fragment .fade-in-then-out fragment-index="3"}
![](Images/Intro/Map_BB_Aquaculture.png){height="1400"}
:::

::: {.absolute bottom="-6%" right="-11%" .fragment .fade-in-then-out fragment-index="4"}
![](Images/Intro/Map_BB_Eol.png){height="1400"}
:::

::: {.absolute bottom="-6%" right="-11%" .fragment .fade-in fragment-index="5"}
![](Images/Intro/Map_BB_ouvrage.png){height="1400"}
:::

::: {.absolute top="15%" left="0%" .fragment .fade-in fragment-index="1"}
![](Images/Intro/Seaport.png){height="500"}
:::

::: {.absolute top="55%" left="0%" .fragment .fade-in fragment-index="2"}
![](Images/Intro/Dragage.png){height="500"}
:::

::: {.absolute top="15%" left="21%" .fragment .fade-in fragment-index="3"}
![](Video/Intro/Oyster_farm.mp4){height="525"}
:::

::: {.absolute top="55%" left="21%" .fragment .fade-in fragment-index="4"}
![](Images/Intro/Eolienne.png){height="500"}
:::

::: {.absolute top="15%" left="42%" .fragment .fade-in fragment-index="5"}
![](Images/Intro/Gois.png){height="500"}
:::

::: {.absolute left="6%" top="11%" .fragment .fade-in fragment-index="1" style="font-size: 50px; color: #78170e;"}
Seaport
:::

::: {.absolute left="5%" bottom="0%" .fragment .fade-in fragment-index="2" style="font-size: 50px; color: #a98a36;"}
Dredging
:::

::: {.absolute left="26%" top="11%" .fragment .fade-in fragment-index="3" style="font-size: 50px; color: #130985;"}
Aquaculture
:::

::: {.absolute left="23%" bottom="0%" .fragment .fade-in fragment-index="4" style="font-size: 50px; color: #31621a;"}
Energy Production
:::

::: {.absolute left="46%" top="11%" .fragment .fade-in fragment-index="5" style="font-size: 50px; color: black;"}
Artificialization
:::

::: {.absolute left="43%" top="56%" .fragment .fade-in fragment-index="6" style="font-size: 50px; color: black;"}
- Fishing activities
- Tourism
- Industries
- ...
:::



## Environmental Impacts {data-transition="fade"}
::: {.absolute top="6.5%"}
*The mark of human activity on nature*
:::

::: {.absolute right="0%" top="0%" style="font-size: 30px; color: black; z-index: 9999;"}
[*developpement-durable.gouv.fr*](https://www.geolittoral.developpement-durable.gouv.fr/telechargement-en-ligne-donnees-geolittoral-a802.html)
:::

::: {.absolute bottom="-6%" right="-11%"}
![](Images/Intro/Map_BB_ouvrage.png){height="1400"}
:::

::: {.absolute top="15%" left="0%"}
![](Images/Intro/Spills.png){height="500"}
:::

::: {.absolute top="55%" left="0%"}
![](Images/Intro/Erosion.png){height="500"}
:::

::: {.absolute top="15%" left="21%"}
![](Video/Intro/Oyster_reef2.mp4){height="525"}
:::

::: {.absolute top="55%" left="21%"}
![](Images/Intro/energy.png){height="500"}
:::

::: {.absolute top="15%" left="42%"}
![](Images/Intro/habitat_destruction.png){height="500"}
:::

::: {.absolute left="6%" top="11%" style="font-size: 50px; color: #78170e;"}
Oil spills
:::

::: {.absolute left="5%" bottom="0%" style="font-size: 50px; color: #a98a36;"}
Erosion
:::

::: {.absolute left="19%" top="11%" style="font-size: 50px; color: #130985;"}
Alien Species Introduction
:::

::: {.absolute left="23%" bottom="0%" style="font-size: 50px; color: #31621a;"}
Energy introduction
:::

::: {.absolute left="43%" top="11%" style="font-size: 50px; color: black;"}
Habitat destruction
:::

::: {.absolute left="43%" top="56%" style="font-size: 50px; color: black;"}
- Fishing activities
- Pollutions
- ...
:::

## Intertidal habitats

::: {.absolute top="6.5%"}
*Living on the edge of land and sea*
:::

::: {.notes}
... and many more habitats like Coralline algal reefs or Cobble or gravel beaches

Seagrass: Blue Carbon Habitat
Hypocamp of the Gulf of Morbihan 
Dugong of the Indo-Pacific
Brent Goose of Noirmoutier

Green and red algae, nutrient sequestration, but can be a threat for ecosystems
:::

::: {.fragment .fade-out fragment-index="1"}
::: {.absolute top="17%" left="0%"}
![](Images/Intro/saltmarsh.jpg){height="500"}
:::

::: {.absolute top="17%" left="28%"}
![](Images/Intro/mangroves.jpg){height="500"}
:::

::: {.absolute top="17%" left="59%"}
![](Images/Intro/polychaete_reef.jpg){height="500"}
:::

::: {.absolute bottom="3%" left="39%"}
![](Images/Intro/mudflat.png){height="500"}
:::

::: {.absolute bottom="3%" left="67.2%"}
![](Images/Intro/Oyster_reefs.png){height="500"}
:::

::: {.absolute bottom="3%" left="0%"}
![](Images/Intro/DJI_0485.png){height="500"}
:::

::: {.absolute left="1%" top="19%" style="font-size: 40px; color: black;"}
Saltmarshes
:::

::: {.absolute left="29%" top="19%" style="font-size: 40px; color: white;"}
Mangroves
:::

::: {.absolute left="60%" top="19%" style="font-size: 40px; color: black;"}
Polychaete reefs
:::

::: {.absolute left="1%" top="57%" style="font-size: 40px; color: black;"}
Rocky reefs
:::

::: {.absolute left="40%" top="89%" style="font-size: 40px; color: white;"}
Tidal flats
:::

::: {.absolute left="68.2%" top="57%" style="font-size: 40px; color: black;"}
Oyster reefs
:::

::: {.absolute bottom="0%" right="6%"}
*A rich variety of intertidal habitats*
:::
:::

::: {.fragment .fade-out fragment-index="4"}
::: {style="position:absolute; top:10%; left:0%; transition: top 1s ease;" .fragment .fade-in fragment-index="1"}
::: {.absolute bottom="-5%" .fragment .fade-out fragment-index="2"}
Soft-bottom substrats
:::
::: {.absolute bottom="-2%" right="7%" style="font-size: 30px;"}
*Guadalquivir River, Spain*
:::
![](Video/Intro/soft_bottom.mp4){height="650"}

::: {.absolute left="60%" top="110%" .fragment .fade-in-then-out fragment-index="2"}
- A - Magnoliopsida
- B - Bacillariophyceae
- C - Phaeophyceae
- D - Florideophyceae
- E - Chlorophyceae
:::

::: {.absolute left="5%" top="115%" .fragment .fade-in-then-out fragment-index="2" style="font-size: 60px;"}
Five Taxonomic Classes
:::

::: {.absolute left="14%" top="125%" .fragment .fade-in-then-out fragment-index="2" style="font-size: 60px;"}
of Vegetation
:::

:::
:::

::: {.absolute top="10%" right="0%" .fragment .fade-in-then-out fragment-index="1"}
::: {.absolute bottom="-5%"}
Hard-bottom substrats
:::
::: {.absolute bottom="-2%" right="7%" .fragment .fade-out fragment-index="2" style="font-size: 30px;"}
*Vigo, Spain*
:::
![](Video/Intro/site_2_vigo_1bis.mp4){height="650"}
:::

::: {.absolute top="0%" right="10%" .fragment .fade-in-then-out fragment-index="2"}
![](Images/Intro/Figs_vegetations.png){height="1370"}
:::

::: {.fragment .fade-out fragment-index="7"}

::: {.absolute top="5%" left="48%" .fragment .fade-in fragment-index="3"}
::: {.absolute top="-5%" right="10%" style="font-size: 30px; color: black;"}
[*Hope et al. 2019*](https://doi.org/10.1111/1365-2745.13322)
:::

![](Images/Intro/MPB-Biofilm.jpg){height="500"}

:::

::: {style="position:absolute; top:10%; left:0%;" .fragment .fade-in fragment-index="4"}
![](Images/Intro/Carbon_seagrass.jpg){height="650"}
:::

::: {.absolute top="5%" right="16%" .fragment .fade-in fragment-index="5"}
![](Images/Intro/seagrass_hypo.png){height="500"}
:::

::: {.absolute top="5%" right="0%" .fragment .fade-in fragment-index="5"}
![](Images/Intro/seagrass_dugong.png){height="500"}
:::

::: {.absolute top="59%" left="22.7%" .fragment .fade-in fragment-index="5"}
![](Images/Intro/bernache_seagrass.png){height="462"}
:::

::: {.absolute top="43%" right="-2%" .fragment .fade-in fragment-index="6"}
::: {.absolute bottom="-3%" right="8%" style="font-size: 30px; color: black;"}
*Saja estuary, Spain*
:::

![](Video/Intro/Santander_green_and_red_algae.mp4){height="730"}
:::

::: {.absolute left="1%" top="60%" .fragment .fade-in fragment-index="3" style="font-size: 60px;"}
Ecosystem Services
:::

::: {.absolute left="2%" top="65%" .fragment .fade-in fragment-index="3"}
- Protection against Erosion
:::

::: {.absolute left="2%" top="70%" .fragment .fade-in fragment-index="4"}
- Carbon fixation
:::

::: {.absolute left="2%" top="75%" .fragment .fade-in fragment-index="5"}
- Nursery & Shelter
:::

::: {.absolute left="2%" top="80%" .fragment .fade-in fragment-index="6"}
- Nutrient Fixation
:::
:::

::: {.absolute left="2%" top="15%" .fragment .fade-in fragment-index="7" style="font-size: 60px;"}
~ $30 trillion per year 
:::

::: {.absolute left="2%" top="25%" .fragment .fade-in fragment-index="7" style="font-size: 50px;"}
Protect these ecosystems:
:::

::: {.absolute left="5%" top="30%" .fragment .fade-in fragment-index="7" style="font-size: 50px;"}
  - Habitat Directive (1992)
  - Water framework Directive (2001)
  - Marine Strategy Framework Directive (2008)
  - Birds Directive (2009)
  - Nature Restoration Law (2024)
:::

::: {.absolute right="0%" bottom="0%" .fragment .fade-in fragment-index="7" style="font-size: 30px;"}
[Source: Koundouri et al., 2023](https://doi.org/10.3389/frevc.2023.1160118)
:::

::: {.absolute left="45%" top="10%" .fragment .fade-in fragment-index="7"}
![](Images/Intro/MSFD-logo.jpg){height="500"}
:::

::: {.absolute left="70%" top="0%" .fragment .fade-in fragment-index="7"}
![](Images/Intro/Natura2000.png){height="500"}
:::

::: {.absolute left="2%" bottom="20%" .fragment .fade-in fragment-index="7" style="font-size: 55px;"}
Good knowledge and monitoring to inform policies
:::

::: {.absolute right="0%" bottom="5%" .fragment .fade-in fragment-index="7"}
![](Images/Intro/NatureRestorationLax.png){height="500"}
:::





## Remote Sensing  {auto-animate=true transition="slide-in fade-out"}
::: {.absolute top="6.5%" .fragment .fade-out fragment-index="2"}
*A tool to map them all !*
:::


::: {.absolute top="-4%" right="-10%" }
<video src="Video/Intro/Oyster_reef_intertidal1.mp4" height="1450" autoplay loop muted playsinline></video>
:::

::: {.absolute top="-4%" right="-10%" .fragment .fade-in fragment-index="1"}
<video src="Video/Intro/Drone_Flight.mp4" height="1450" autoplay loop muted playsinline></video>
:::

::: {.absolute .fragment .fade-out fragment-index="2" left="2%" top="15%" style="font-size: 50px;"}
Traditional sampling methods: 
:::

::: {.absolute .fragment .fade-out fragment-index="2" left="5%" top="20%"}
  - Expensive
  - Time consuming
  - Low extent and temporal resolution
  - Hard to access
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="1" left="2%" top="45%" style="font-size: 50px;"}
Remote Sensing: 
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="1" left="5%" top="50%"}
  - Cost effective
  - Good coverage/Time ratio
  - Synchronous broad-scale view
  - Simplifies the field work
:::

::: {.absolute top="6.5%" .fragment .fade-in fragment-index="2"} 
*From the sky to the sea *
:::

::: {.absolute top="15%" .fragment .fade-in fragment-index="2"} 
The science of obtaining information about objects or areas from a distance
:::


::: {.absolute top="22%" left="0%" .fragment .fade-in fragment-index="2"}
![](Images/Intro/eyes.png){height="400" .circular-fade}
:::

::: {.absolute top="22%" left="17%" .fragment .fade-in fragment-index="2"}
![](Images/Intro/Bats.png){height="400" .circular-fade}
:::

::: {.absolute top="22%" left="34%" .fragment .fade-in fragment-index="2" style="z-index: 9999;"}
![](Images/Intro/james_webb.png){height="400" .circular-fade}
:::

::: {.absolute top="22%" left="51%" .fragment .fade-in fragment-index="2"}
![](Images/Intro/IRM.png){height="400" .circular-fade}
:::

::: {.absolute top="59%" .fragment .fade-in fragment-index="3"} 
Applyed to Earth Observation: 
:::

::: {.absolute top="65%" left="0%" .fragment .fade-in fragment-index="3" data-id="box1" }
![](Images/Intro/Sentinel2_1.png){height="400" .circular-fade}
:::

::: {.absolute top="65%" left="17%" .fragment .fade-in fragment-index="3" data-id="box2" }
![](Images/Intro/Airbornn.png){height="400" .circular-fade}
:::

::: {.absolute top="65%" left="34%" .fragment .fade-in fragment-index="3" data-id="box3" }
![](Images/Intro/Drone_MPB1.png){height="400" .circular-fade}
:::

::: {.absolute top="65%" left="51%" .fragment .fade-in fragment-index="3" data-id="box4" }
![](Images/Intro/Bede_ASD.png){height="400" .circular-fade}
:::

## Remote Sensing  {auto-animate=true visibility="uncounted" transition="none"}

::: {.fragment .fade-out fragment-index="2"}
::: {.absolute top="6.5%"}
*From the sky to the sea *
:::

::: {.absolute top="20%" left="0%" data-id="box1" }
![](Images/Intro/Sentinel2_1.png){height="550" .circular-fade}
:::

::: {.absolute top="20%" left="24%" data-id="box3" }
![](Images/Intro/Drone_MPB1.png){height="550" .circular-fade}
:::



::: {.absolute top="10%" right="-0%" .fragment .fade-in fragment-index="1"}
![](Images/Intro/Satellite_resolution.png){height="1100"}
:::

::: {.absolute left="0%" top="65%" style="font-size: 40px;"} 
**Sentinel-2** 
:::
  
::: {.absolute left="25%" top="65%" style="font-size: 40px;"} 
**Drone**
:::
  
::: {.absolute left="1%" top="70%" style="font-size: 35px;"}

10–20 m resolution

100 000 km²/image

5-day revisit

:::
  
::: {.absolute left="26%" top="70%" style="font-size: 35px;"}

cm resolution

Adapted to small-scale studies

Flight planning flexibility
:::
:::

::: {.absolute top="6.5%" .fragment .fade-in-then-out fragment-index="2"}
*Fieldwork remains essential to make sense of what satellites see*
:::


::: {.absolute top="-3.5%" right="-10%" .fragment .fade-in-then-out fragment-index="2"}

<video src="Video/Intro/Fildwork_santander2.mp4" height="1450" autoplay loop muted playsinline></video>

:::

::: {.absolute top="15%" left="0%" .fragment .fade-in-then-out fragment-index="2"}
::: {.absolute bottom="-5%" left="30%"}
Radiometric calibration
:::
::: {.absolute top="-5%" right="10%" style="font-size: 25px;"}
*Aven, France*
:::



![](Images/Intro/Bede_asd1.jpg){height="450" .circular-fade}
:::

::: {.absolute top="15%" left="40%" .fragment .fade-in-then-out fragment-index="2"}
::: {.absolute bottom="-5%" left="25%"}
Ground truthing
:::
::: {.absolute top="-5%" right="10%" style="font-size: 25px;"}
*Noirmoutier, France*
:::



![](Images/Intro/Quadrats.jpg){height="450" .circular-fade}
:::

::: {.absolute top="60%" left="0%" .fragment .fade-in-then-out fragment-index="2"}
::: {.absolute bottom="-5%" left="10%"}
Features georeferencing
:::

::: {.absolute top="-5%" right="10%" style="font-size: 25px;"}
*Tainaron, Greece*
:::



![](Images/Intro/Greece_RTK.jpg){height="450" .circular-fade}
:::

::: {.absolute top="60%" left="27%" .fragment .fade-in-then-out fragment-index="2"}
::: {.absolute bottom="-5%" left="40%"}
Sampling
:::

::: {.absolute top="-5%" right="10%" style="font-size: 25px;"}
*Cadiz, Spain*
:::


![](Images/Intro/MPB_sampling.jpg){height="450" .circular-fade}
:::

::: {.absolute top="6.5%" .fragment .fade-in fragment-index="3"}
*Monitoring coastal change from space*
:::


```{r animation paper per year}
#| cache: true
#| echo: false
#| warning: false
#| eval: false


library(gganimate)
library(tidyverse)
library(Polychrome)  # if not installed

my_colors <- createPalette(24, seedcolors = c("#CC6677", "#4477AA"),range = c(60, 120))

df <- read.csv("Data/Intro/trend_paper_coastalRS.csv")%>%
  rename(Count = `Document.Count`, Year = `Publication.Year`, Type = `Document.Type`) 

year_breaks <- seq(1970, max(df$Year), by = 10)

# Match color palette to document types
type_levels <- unique(df$Type)
n_types <- length(type_levels)
type_colors <- setNames(my_colors[1:n_types], type_levels)

p <- df %>% 
  ggplot(aes(x = as.factor(Year), y = Count, fill = Type))+
  geom_col()+
  scale_fill_manual(values = type_colors) +
  scale_x_discrete(breaks = as.character(year_breaks)) +
  labs(x = "Year", y = "Number of Documents") +
  theme_minimal(base_size = 40) +  # Base size for all text
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = c(0.2, 0.6)) +
  transition_reveal(as.integer(Year))

rendered <- animate(p, duration = 2, fps = 20, width = 1920, height = 1080, end_pause = 20, rewind = FALSE, renderer = gifski_renderer(loop = FALSE))

anim_save("Images/Intro/document_trend.gif", animation = rendered)

```

::: {.absolute top="12%" .fragment .fade-in fragment-index="3"}
Coastal Remote Sensing: A trendy topic !
:::

::: {.absolute .fragment .fade-in fragment-index="3" top="18%"}

![](Images/Intro/document_trend.gif){height="650"}
:::

::: {.absolute top="5%" left="50%" .fragment .fade-in fragment-index="4"}
![](Images/Intro/Pereira2013.png){height="300"}
:::

::: {.absolute top="70%" .fragment .fade-in fragment-index="4"}
 - Standardized measurements or indicators to monitor biodiversity
:::

::: {.absolute top="80%" .fragment .fade-in fragment-index="5" style="font-size: 60px;"}
 - Adapted for remote sensing applications
:::

::: {.absolute top="28%" right="0%" .fragment .fade-in fragment-index="5"}
![](Images/Intro/MullerKarger.png){width="1300"}
:::

::: {.absolute top="55%" right="8%" .fragment .fade-in fragment-index="5"}
![](Images/Intro/muller_slide4.png){width="900"}
:::




## Objectives of this work {data-background-image="Images/Intro/background_obj.png"}

::: {style="text-align: center; position: absolute; left: 50%; top: 20%; width:2300px; transform: translate(-50%, -50%)"}
[Show how remote sensing can effectively map intertidal habitats and assess environmental pressures]{style="font-size: 80px"}
:::

::: {.fragment .fade-in fragment-index="1" style="text-align: center; position: absolute; left: 50%; top: 40%; width:2300px; transform: translate(-50%, -50%)"}
[Analyzing the potential of multispectral sensors to distinguish macrophytes in soft-bottom intertidal zones at low tide]{style="font-size: 60px"}
:::

::: {.fragment .fade-in fragment-index="2" style="text-align: center; position: absolute; left: 50%; top: 60%; width:2300px; transform: translate(-50%, -50%)"}
[Building an algorithm that discriminates the most common taxonomic classes of vegetation found on soft bottom intertidal sediment]{style="font-size: 60px"}
:::

::: {.fragment .fade-in fragment-index="3" style="text-align: center; position: absolute; left: 50%; top: 80%; width:2300px; transform: translate(-50%, -50%)"}
[Investigate the capacity of remote sensing to monitor intertidal vegetation under abiotic and biotic pressures]{style="font-size: 60px"}
:::



# Developing Advanced Methodologies for Intertidal Vegetation Monitoring {data-stack-name="Challenges and Solutions" background-image="Images/Part1/Background_First_slide.png" style="width: 1300px;"}

- [Challenges to map intertidal vegetation](#challenges-to-map-intertidal-vegetation)
- [Material & Methods](#material-methods)
- [Results](#results)
- [Discussion](#discussion)

## Challenges to map intertidal vegetation

::: {.absolute top="6.5%"}
*Introduction to Spectroradiometry*
:::

```{r Fig STDvsRAW}
#| cache: true
#| echo: false
#| eval: false
#| warning: false

library(tidyverse)
library(gganimate)
library(Utilities.Package)

##### Zost 

Zos <- read.table("Data/Part1/hyperspectral_zoster.txt", header=F)

names(Zos) <- c("Wavelength", paste0("Zos_",2:ncol(Zos)-1))



Zos <- Zos %>% 
  pivot_longer(-Wavelength, names_to = "SpectraID", values_to = "Ref")

id_ranking <- Zos %>%
  dplyr::filter(Wavelength == 665) %>%
  arrange(Ref) %>%
  mutate(ID = row_number()) %>%
  select(SpectraID, ID) 

Zos <- Zos %>% 
  left_join(id_ranking, by = "SpectraID") %>% 
  group_by(SpectraID) %>% 
  mutate(Ref_STD = (Ref-min(Ref))/(max(Ref)-min(Ref))) %>% 
  pivot_longer(-c(Wavelength, ID ,SpectraID), names_to = "Metric", values_to = "values")%>%
  ungroup() %>% 
  mutate(Biomass = max(ID) - ID + 1) 

plot_std <- Zos  %>% 
  ggplot(aes(x = Wavelength, y = values, color = Biomass, group = ID)  ) +
  geom_line()+
  scale_color_viridis_c(
    name = "Biomass",
    option = "D",
    breaks = c(min(Zos$Biomass), max(Zos$Biomass)),
    labels = c("Low", "High")
  )+
  ylab("Standardised Reflectance")+
  xlab("Wavelength")+
  transition_states(Metric,
                    transition_length = 2,
                    state_length = 1,
                    wrap = FALSE)+ 
  view_follow()+
  theme_Bede()+
  theme(legend.position = c(0.2,0.7),
        axis.title = element_text(face = "bold")
        )

rendered <- animate(plot_std, duration = 4, fps = 20, width = 8, height = 6, units = "in", res = 300, end_pause = 20, rewind = F, renderer = gifski_renderer(loop = F))

anim_save("Images/Part1/Fig_STD.gif", animation = rendered)

plot <- Zos  %>% 
  dplyr::filter(Metric == "Ref") %>% 
  ggplot() +
  geom_line(aes(x = Wavelength, y = values, color = Biomass, group = ID)  )+
  scale_color_viridis_c(
    name = "Biomass",
    option = "D",
    breaks = c(min(Zos$Biomass), max(Zos$Biomass)),
    labels = c("Low", "High")
  )+
  ylab("Refletance")+
  xlab("Wavelength")+
  theme_Bede()+
  theme(legend.position = c(0.2,0.8),
        axis.title = element_text(face = "bold")
        )

ggsave("Images/Part1/Fig_STD_static.png", plot,width = 8, height = 6, units = "in", dpi = 300)



```

```{r plots for spectral presentation}
#| cache: true
#| echo: false
#| eval: false
#| warning: false

library(tidyverse)
library(signal)
library(Utilities.Package)
library(gganimate)

rhodo <- "Data/Part1/BELON_STD.csv" %>%
    read.csv() %>% 
    dplyr::filter(Letter == "C") %>% 
    group_by(Wavelength) %>% 
    reframe(Rhodophyceae = mean(mean_STD))


# Apply Savitzky-Golay smoothing
# Choose polynomial order and window size
sgolay_order <- 2
sgolay_window <- 11  # Must be odd and >= order + 2

# Make sure window size is not larger than number of rows
sgolay_window <- min(sgolay_window, nrow(rhodo))
if (sgolay_window %% 2 == 0) sgolay_window <- sgolay_window - 1  # Ensure it's odd

rhodo$Rhodophyceae <- sgolayfilt(rhodo$Rhodophyceae, p = sgolay_order, n = sgolay_window)
rhodo$Rhodophyceae <- sgolayfilt(rhodo$Rhodophyceae, p = sgolay_order, n = sgolay_window)
rhodo$Rhodophyceae <- sgolayfilt(rhodo$Rhodophyceae, p = sgolay_order, n = sgolay_window)
rhodo$Rhodophyceae <- sgolayfilt(rhodo$Rhodophyceae, p = sgolay_order, n = sgolay_window)
rhodo$Rhodophyceae <- sgolayfilt(rhodo$Rhodophyceae, p = sgolay_order, n = sgolay_window)


ggplot(rhodo)+
  geom_line(aes(x = Wavelength, y = Rhodophyceae))

log_func <- function(x) {
  0.7 + 0.3 * log(x / 400) / log(900 / 400)
}

speclib <- "Data/Part1/spec_lib.csv" %>% 
    read.csv() %>% 
    select(-c(X,OSM,Bare.Sediment,Xanthophyceae)) %>% 
    left_join(rhodo, by = "Wavelength") %>%
    pivot_longer(-Wavelength, names_to = "Class",values_to = "Ref")  %>% 
    mutate(Class = case_when(Class == "Magnoliosida" ~ "C - Magnoliopsida",
                             Class == "Ulvophyceae" ~ "B - Chlorophyceae",
                             Class == "Rhodophyceae" ~ "E - Florideophyceae",
                             Class == "Bacillariophyceae" ~ "D - Bacillariophyceae",
                             Class == "Phaeophyceae" ~ "A - Phaeophyceae",
                             TRUE ~ Class)) %>% 
    group_by(Class) %>% 
    reframe(Wavelength = Wavelength,
            Ref = (Ref-min(Ref))/(max(Ref)-min(Ref))) %>% 
  mutate(Ref = case_when(Class == "B - Chlorophyceae" ~ log_func(Wavelength)*Ref,
                         T ~ Ref))
    
speclib$Class <- factor(speclib$Class, levels = c(
  "A - Phaeophyceae",
  "B - Chlorophyceae",
  "C - Magnoliopsida",
  "D - Bacillariophyceae",
  "E - Florideophyceae"
))

colscale <- c("D - Bacillariophyceae" = "#DAA520", 
              "B - Chlorophyceae" = "#b3ff1a", 
              "C - Magnoliopsida" = "#389318", 
              "A - Phaeophyceae" = "#873e23", 
              "E - Florideophyceae" = "#b3002d")



#### default plot

(init_plot <- speclib %>% 
  # dplyr::filter(Class %in% c("Chlorophyceae", "Magnoliopsida")) %>% 
  ggplot()+
    # geom_line(data = fade_class, mapping = aes(x = Wavelength, y = Ref, group = Class1), color = "grey", alpha = 0.2, linewidth = 1.5)+
    geom_line(aes(x = Wavelength, y = Ref, color = Class, group = Class), linewidth = 1.5)+

    scale_color_manual(values=colscale)+
    theme_Bede()+
  ylab("Standardised Reflectance") +
  xlab("Wavelength (nm)") +
  theme(
    legend.position = c(0.15, 0.8),
    legend.text = element_text(size = 12),
    legend.text.align = 0,
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12)
  )
)

ggsave("Images/Part1/Figure_Hyperspectral.png", init_plot, width = 8, height = 6)

#### Zooming animation


# Step 1: create a variable for the animation state (frame)
# Let's assume `speclib` has a Wavelength range larger than 400-680
n_frames <- 20

# Séquence de zooms (xmax diminue vers 680)
xmax_seq <- seq(from = max(speclib$Wavelength), to = 665, length.out = n_frames)
xmin_seq <- seq(from = min(speclib$Wavelength), to = 450, length.out = n_frames)  # xmin reste constant

# Générer les données avec les limites x intégrées
animated_data <- lapply(1:n_frames, function(i) {
  speclib %>%
    mutate(frame = i,
           x_min = xmin_seq[i],
           x_max = xmax_seq[i])
}) %>% bind_rows()

p <- ggplot(animated_data) +
  geom_line(aes(x = Wavelength, y = Ref, color = Class, group = Class), linewidth = 1.5) +
  scale_color_manual(values = colscale) +
  theme_Bede() +
  ylab("Standardised Reflectance") +
  xlab("Wavelength (nm)") +
  theme(
    legend.position = c(0.15, 0.8),
    legend.text = element_text(size = 12),
    legend.text.align = 0,

    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12)
  ) +
  transition_manual(frame, parameters = list(x_min = animated_data$x_min, x_max = animated_data$x_max)) +
  ease_aes('cubic-in-out')+
  coord_cartesian(xlim = c(400, 900))  # valeur initiale temporaire


frames <- unique(animated_data$frame)


list.files("Data/Part1/temp_frames/", full.names = T) %>% 
  file.remove()

# Create and save plots
for (f in seq_len(n_frames)) {
  x_max <- xmax_seq[f]
  x_min <- xmin_seq[f]
  df <- dplyr::filter(speclib, Wavelength >= x_min, Wavelength <= x_max)
  
  p <- ggplot(df) +
    geom_line(aes(x = Wavelength, y = Ref, color = Class, group = Class), linewidth = 1.5) +
    scale_color_manual(values = colscale) +
    theme_Bede() +
    ylab("Standardised Reflectance") +
    xlab("Wavelength (nm)") +
    coord_cartesian(xlim = c(x_min, x_max)) +
    # ggtitle(paste("Zoom jusqu’à", round(x_max), "nm")) +
    theme(
      legend.position = c(0.15, 0.8),
      legend.text = element_text(size = 12),
      legend.text.align = 0,
      axis.text.x = element_text(size = 12),
      axis.text.y = element_text(size = 12)
    )
  
  ggsave(sprintf("Data/Part1/temp_frames/frame_%03d.png", f), p, width = 8, height = 6)
}

# Create animation from saved frames
imgs <- list.files("Data/Part1/temp_frames", full.names = TRUE, pattern = "*.png")
img_list <- magick::image_read(imgs)
animation <- magick::image_animate(magick::image_join(img_list), fps = 100,  loop = 1, optimize = T)

# Preview
# print(animation)

magick::image_write(animation, "Images/Part1/x_axis_zoom.gif", quality = 100)


#### Faded and animate

fade_class <- speclib %>% 
  dplyr::filter(!Class %in% c("Chlorophyceae", "Magnoliopsida"),
                Wavelength >= 450, 
                Wavelength <= 665 ) %>% 
  rename(Class1 = "Class")


faded <- speclib %>% 
  dplyr::filter(Class %in% c("Chlorophyceae", "Magnoliopsida"),
                Wavelength >= 450, 
                Wavelength <= 665) %>% 
  ggplot()+
    geom_line(data = fade_class, mapping = aes(x = Wavelength, y = Ref, group = Class1), color = "grey", alpha = 0.2, linewidth = 1.5)+
    geom_line(aes(x = Wavelength, y = Ref, color = Class, group = 1L), linewidth = 1.5)+

    scale_color_manual(values=colscale)+
    theme_Bede()+
    ylab("Standardised Reflectance")+
    xlab("Wavelength (nm)")+
    theme(legend.position = c(0.15, 0.8),
          legend.text = element_text(size = 12),
          axis.text.x = element_text(size = 12),
          axis.text.y = element_text(size = 12))+
    coord_cartesian(xlim = c(450, 665)) +
    # ggtitle(paste("Zoom jusqu’à", round(x_max), "nm")) +
    theme(
      legend.position = c(0.15, 0.8),
      legend.text = element_text(size = 12),
      axis.text.x = element_text(size = 12),
      axis.text.y = element_text(size = 12)
    )+ 
  transition_states(Class,
                    transition_length = 2,
                    state_length = 1)

rendered <- animate(faded, duration = 2, fps = 20, width = 8, height = 6, units = "in", res = 300, end_pause = 1, rewind = F, renderer = gifski_renderer(loop = T))

anim_save("Images/Part1/Figure_Hyperspectral_Faded.gif", animation = rendered)

# ggsave("Images/Part1/Figure_Hyperspectral_Faded.png", faded, width = 8, height = 6)
```

::: {.fragment .fade-out fragment-index="3"}
::: {.absolute bottom="0%" left="4%" .fragment .fade-in fragment-index="1"}
![](Images/Part1/SPC_gradient.png){height="233"}
:::
:::

::: {.absolute top="10%" right="0%" .fragment .fade-out fragment-index="1"}
![](Images/Part1/FigLightPath.png){height="900"}
:::

::: {.absolute top="10%" right="0%" .fragment .fade-in-then-out fragment-index="1"}
![](Images/Part1/FigLightPath2.png){height="900"}
:::

:::{.absolute bottom="5%" right="33%" .fragment .fade-in-then-out fragment-index="1"}

$$R(\lambda) = \frac{L_{\text{up}}(\lambda)}{L_{\text{down}}(\lambda)}$$

:::

:::{.absolute bottom="2%" right="0%" .fragment .fade-in-then-out fragment-index="1"}
- $\lambda$ is the Wavelenght
- $L_{\text{up}}$ is the upwelling radiance
- $L_{\text{down}}$ is the downwelling radiance
:::

::: {.absolute top="10%" left="0%" .fragment .fade-in-then-out fragment-index="1"}
![](Images/Part1/Fig_STD_static.png){height="900"}
:::

::: {.absolute top="10%" left="0%" .fragment .fade-in-then-out fragment-index="2"}
![](Images/Part1/Fig_STD.gif){height="900"}
:::

:::{.absolute top="30%" left="60%" .fragment .fade-in-then-out fragment-index="2"}

$$R_i^*(\lambda) = \frac{R_i(\lambda) - \min(R_i)}{\max(R_i) - \min(R_i)}$$

:::

:::{.absolute top="55%" left="52%" .fragment .fade-in-then-out fragment-index="2"}
- $R_i(\lambda)$ is the reflectance the the wavelength $\lambda$ of the spectrum $R_i$ 
- $min(R_i)$ and $max(R_i)$ are the minimum and maxium reflectance of the spectrum $R_i$
:::

:::{.absolute top="80%" left="52%" .fragment .fade-in-then-out fragment-index="2"}
- Each spectrum is between 0 and 1
:::

::: {.absolute top="10%" left="0%" .fragment .fade-in-then-out fragment-index="3"}
![](Images/Part1/Figure_Hyperspectral.png){height="1000"}
:::
::: {.fragment .fade-out fragment-index="5"}
::: {.absolute top="10%" right="0%" .fragment .fade-in fragment-index="3"}
![](Images/Part1/Figs_vegetations_2.png){width="1100"}
:::

::: {.absolute bottom="0%" right="0%" .fragment .fade-in fragment-index="3"}
![](Images/Part1/Figure13.png){width="1100"}
:::
:::

::: {.absolute bottom="0%" right="0%" .fragment .fade-in-then-out fragment-index="5"}
![](Images/Part1/Figure13_Florideo.png){width="1100"}
:::

::: {.absolute top="10%" right="0%" .fragment .fade-in-then-out fragment-index="5"}
![](Images/Part1/Figs_vegetations_2_Florideo.png){width="1100"}
:::

::: {.absolute top="10%" right="0%" .fragment .fade-in-then-out fragment-index="6"}
![](Images/Part1/Figs_vegetations_2_Bacillario.png){width="1100"}
:::

::: {.fragment .fade-out fragment-index="8"}

::: {.absolute top="10%" right="0%" .fragment .fade-in-then-out fragment-index="7"}
![](Images/Part1/Figs_vegetations_2_Green.png){width="1100"}
:::
:::

::: {.absolute bottom="0%" right="0%" .fragment .fade-in-then-out fragment-index="6"}
![](Images/Part1/Figure13_Bacillario.png){width="1100"}
:::

::: {.fragment .fade-out fragment-index="8"}

::: {.absolute bottom="0%" right="0%" .fragment .fade-in-then-out fragment-index="7"}
![](Images/Part1/Figure13_Green.png){width="1100"}
:::
:::

::: {.absolute top="10%" left="0%" .fragment .fade-in-then-out fragment-index="4"}
![](Images/Part1/x_axis_zoom.gif){height="1000"}
:::

::: {.absolute top="10%" left="0%" .fragment .fade-in-then-out fragment-index="5"}
![](Images/Part1/x_axis_zoom_Florideo.png){height="1000"}
:::

::: {.absolute top="10%" left="0%" .fragment .fade-in-then-out fragment-index="6"}
![](Images/Part1/x_axis_zoom_Bacillario.png){height="1000"}
:::

::: {.fragment .fade-out fragment-index="8"}
::: {.absolute top="10%" left="0%" .fragment .fade-in fragment-index="7"}
![](Images/Part1/Figure_Hyperspectral_Faded.gif){height="1000"}
:::
:::


```{r Spectra resampling}
#| echo: false
#| eval: false
#| warning: false

library(tidyverse)
library(signal)
library(Utilities.Package)
library(gganimate)

rhodo <- "Data/Part1/BELON_STD.csv" %>%
    read.csv() %>% 
    dplyr::filter(Letter == "C") %>% 
    group_by(Wavelength) %>% 
    reframe(Rhodophyceae = mean(mean_STD))


# Apply Savitzky-Golay smoothing
# Choose polynomial order and window size
sgolay_order <- 2
sgolay_window <- 11  # Must be odd and >= order + 2

# Make sure window size is not larger than number of rows
sgolay_window <- min(sgolay_window, nrow(rhodo))
if (sgolay_window %% 2 == 0) sgolay_window <- sgolay_window - 1  # Ensure it's odd

rhodo$Rhodophyceae <- sgolayfilt(rhodo$Rhodophyceae, p = sgolay_order, n = sgolay_window)
rhodo$Rhodophyceae <- sgolayfilt(rhodo$Rhodophyceae, p = sgolay_order, n = sgolay_window)
rhodo$Rhodophyceae <- sgolayfilt(rhodo$Rhodophyceae, p = sgolay_order, n = sgolay_window)
rhodo$Rhodophyceae <- sgolayfilt(rhodo$Rhodophyceae, p = sgolay_order, n = sgolay_window)
rhodo$Rhodophyceae <- sgolayfilt(rhodo$Rhodophyceae, p = sgolay_order, n = sgolay_window)


ggplot(rhodo)+
  geom_line(aes(x = Wavelength, y = Rhodophyceae))

log_func <- function(x) {
  0.7 + 0.3 * log(x / 400) / log(900 / 400)
}

speclib <- "Data/Part1/spec_lib.csv" %>% 
    read.csv() %>% 
    select(-c(X,OSM,Bare.Sediment,Xanthophyceae)) %>% 
    left_join(rhodo, by = "Wavelength") %>%
    pivot_longer(-Wavelength, names_to = "Class",values_to = "Ref")  %>% 
    mutate(Class = case_when(Class == "Magnoliosida" ~ "C - Magnoliopsida",
                             Class == "Ulvophyceae" ~ "B - Chlorophyceae",
                             Class == "Rhodophyceae" ~ "E - Florideophyceae",
                             Class == "Bacillariophyceae" ~ "D - Bacillariophyceae",
                             Class == "Phaeophyceae" ~ "A - Phaeophyceae",
                             TRUE ~ Class)) %>% 
    group_by(Class) %>% 
    reframe(Wavelength = Wavelength,
            Ref = (Ref-min(Ref))/(max(Ref)-min(Ref))) %>% 
  mutate(Ref = case_when(Class == "B - Chlorophyceae" ~ log_func(Wavelength)*Ref,
                         T ~ Ref))
    
speclib$Class <- factor(speclib$Class, levels = c(
  "A - Phaeophyceae",
  "B - Chlorophyceae",
  "C - Magnoliopsida",
  "D - Bacillariophyceae",
  "E - Florideophyceae"
))

colscale <- c("D - Bacillariophyceae" = "#DAA520", 
              "B - Chlorophyceae" = "#b3ff1a", 
              "C - Magnoliopsida" = "#389318", 
              "A - Phaeophyceae" = "#873e23", 
              "E - Florideophyceae" = "#b3002d")



#### default plot

(init_plot <- speclib %>% 
  # dplyr::filter(Class %in% c("Chlorophyceae", "Magnoliopsida")) %>% 
  ggplot()+
    # geom_line(data = fade_class, mapping = aes(x = Wavelength, y = Ref, group = Class1), color = "grey", alpha = 0.2, linewidth = 1.5)+
    geom_line(aes(x = Wavelength, y = Ref, color = Class, group = Class), linewidth = 1.5)+

    scale_color_manual(values=colscale)+
    theme_Bede()+
  ylab("Standardised Reflectance") +
  xlab("Wavelength (nm)")  +
    xlim(c(400,900))+
  theme(
    legend.position = c(0.15, 0.8),
    legend.text = element_text(size = 12),
    legend.text.align = 0,
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12)
  )
)


####### PRISMA 
RSF_Prisma <-readxl::read_excel("Data/Part1/prisma_SRF.xlsx") %>% 
  as_tibble() %>% 
  pivot_longer(-Wavelength, names_to = "Bands", values_to = "SRF") %>% 
  mutate(SRF = as.numeric(SRF))

Prisma_Band_Max <- RSF_Prisma %>% 
  group_by(Bands) %>% 
  dplyr::filter(SRF == max(SRF))

for (i in unique(RSF_Prisma$Bands)) {
  
  band_i <- RSF_Prisma %>% 
    dplyr::filter(Bands == i) %>% 
    dplyr::select(-Bands)
  
  Joined_lib_SRF <- speclib %>% 
    left_join(band_i, by = "Wavelength")
  
  Ref_Prisma_band_i <- Joined_lib_SRF %>% 
    group_by(Class) %>% 
    reframe(Ref = weighted.mean(Ref,SRF)) %>% 
    mutate(Wavelength = Prisma_Band_Max %>% dplyr::filter(Bands == i) %>% pull(Wavelength))
  
  if(i == "Band 1"){
    Ref_Prisma = Ref_Prisma_band_i
  }else{
    Ref_Prisma = rbind(Ref_Prisma,Ref_Prisma_band_i)
  }
}

Ref_Prisma <- Ref_Prisma %>% 
  dplyr::filter(Wavelength > 400, 
                Wavelength < 900) %>% 
  group_by(Class) %>% 
  mutate(Ref = (Ref-min(Ref))/(max(Ref)-min(Ref)),
         Sensor = "Prisma")



(init_plot_PRISMA <- Ref_Prisma %>% 
  # dplyr::filter(Class %in% c("Chlorophyceae", "Magnoliopsida")) %>% 
  ggplot()+
    # geom_line(data = fade_class, mapping = aes(x = Wavelength, y = Ref, group = Class1), color = "grey", alpha = 0.2, linewidth = 1.5)+
    geom_line(aes(x = Wavelength, y = Ref, color = Class, group = Class), linewidth = 1.5)+

    scale_color_manual(values=colscale)+
    theme_Bede()+
  ylab("Standardised Reflectance") +
  xlab("Wavelength (nm)") +
    xlim(c(400,900))+
  theme(
    legend.position = c(0.15, 0.8),
    legend.text = element_text(size = 12),
    legend.text.align = 0,
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12)
  )
)


### Sentinel-2

RSF_S2 <-readxl::read_excel("Data/Part1/S2_SRF.xlsx") %>% 
  as_tibble() %>% 
  pivot_longer(-Wavelength, names_to = "Bands", values_to = "SRF") %>% 
  mutate(SRF = as.numeric(SRF),
         Bands = gsub(".*_","",Bands))

S2_Band_Max <- data.frame(Bands = unique(RSF_S2$Bands),
                          Wavelength = c(443,490,560,665,705,740,783,742,865,945,1375,1610,2190))

for (i in unique(RSF_S2$Bands)) {
  
  band_i <- RSF_S2 %>% 
    dplyr::filter(Bands == i) %>% 
    dplyr::select(-Bands)
  
  Joined_lib_SRF <- speclib %>% 
    left_join(band_i, by = "Wavelength")
  
  Ref_S2_band_i <- Joined_lib_SRF %>% 
    group_by(Class) %>% 
    reframe(Ref = weighted.mean(Ref,SRF)) %>% 
    mutate(Wavelength = S2_Band_Max %>% dplyr::filter(Bands == i) %>% pull(Wavelength))
  
  if(i == "B1"){
    Ref_S2 = Ref_S2_band_i
  }else{
    Ref_S2 = rbind(Ref_S2,Ref_S2_band_i)
  }
}

Ref_S2 <- Ref_S2 %>% 
  dplyr::filter(Wavelength > 400, 
                Wavelength < 900) %>% 
  group_by(Class) %>% 
  mutate(Ref = (Ref-min(Ref))/(max(Ref)-min(Ref)),
         Sensor = "Sentinel-2")%>% 
   dplyr::filter(Wavelength != 742)
  

unique(Ref_S2$Wavelength)

(init_plot_S2 <- Ref_S2  %>% 
  # dplyr::filter(Class %in% c("Chlorophyceae", "Magnoliopsida")) %>% 
  ggplot()+
    # geom_line(data = fade_class, mapping = aes(x = Wavelength, y = Ref, group = Class1), color = "grey", alpha = 0.2, linewidth = 1.5)+
    geom_line(aes(x = Wavelength, y = Ref, color = Class, group = Class), linewidth = 1.5)+

    scale_color_manual(values=colscale)+
    theme_Bede()+
  ylab("Standardised Reflectance") +
  xlab("Wavelength (nm)") +
    xlim(c(400,900))+
  theme(
    legend.position = c(0.15, 0.8),
    legend.text = element_text(size = 12),
    legend.text.align = 0,
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12)
  )
)


########### Pleiades

 df <-read.table("Data/Part1/pleiades_a_SRF.txt")
 
 names(df)<- c("Wavelength", paste0("B", 1:4))
 
 RSF_Pleiades<- df %>% 
  as_tibble() %>% 
   mutate(Wavelength = Wavelength *1000)
 
 new_wavelengths <- seq(min(RSF_Pleiades$Wavelength), max(RSF_Pleiades$Wavelength), by = 1)

 
 interpolated_df <- tibble(Wavelength = new_wavelengths)

 for (i in 2:ncol(RSF_Pleiades)) {
  col_name <- paste0("B", i-1)
  interpolated_df[[col_name]] <- approx(RSF_Pleiades$Wavelength, RSF_Pleiades[[col_name]], xout = new_wavelengths, rule = 2)$y
}
 
 
 RSF_Pleiades <- interpolated_df %>% 
  pivot_longer(-Wavelength, names_to = "Bands", values_to = "SRF") %>% 
  mutate(SRF = as.numeric(SRF),
         Bands = gsub(".*_","",Bands), 
         Wavelength = as.numeric(Wavelength))

Pleiades_Band_Max <- data.frame(Bands = unique(RSF_Pleiades$Bands),
                          Wavelength = c(mean(c(550,430)), mean(c(610,490)),mean(c(720,600)), mean(c(950,750))))

for (i in unique(RSF_Pleiades$Bands)) {
  
  band_i <- RSF_Pleiades %>% 
    dplyr::filter(Bands == i) %>% 
    dplyr::select(-Bands)
  
  Joined_lib_SRF <- speclib %>% 
    left_join(band_i, by = "Wavelength") %>% 
    mutate(SRF = case_when(is.na(SRF) ~ 0,
                           T ~SRF ))
  
  Ref_Pleiades_band_i <- Joined_lib_SRF %>% 
    group_by(Class) %>% 
    reframe(Ref = weighted.mean(Ref,SRF)) %>% 
    mutate(Wavelength = Pleiades_Band_Max %>% dplyr::filter(Bands == i) %>% pull(Wavelength))
  
  if(i == "B1"){
    Ref_Pleiades = Ref_Pleiades_band_i
  }else{
    Ref_Pleiades = rbind(Ref_Pleiades,Ref_Pleiades_band_i)
  }
}

Ref_Pleiades <- Ref_Pleiades %>% 
  dplyr::filter(Wavelength > 400, 
                Wavelength < 900) %>% 
  group_by(Class) %>% 
  mutate(Ref = (Ref-min(Ref))/(max(Ref)-min(Ref)),
         Sensor = "Pleiades")
  



(init_plot_Pleiades <- Ref_Pleiades %>% 
   # dplyr::filter(Wavelength != 742) %>% 
  # dplyr::filter(Class %in% c("Chlorophyceae", "Magnoliopsida")) %>% 
  ggplot()+
    # geom_line(data = fade_class, mapping = aes(x = Wavelength, y = Ref, group = Class1), color = "grey", alpha = 0.2, linewidth = 1.5)+
    geom_line(aes(x = Wavelength, y = Ref, color = Class, group = Class), linewidth = 1.5)+

    scale_color_manual(values=colscale)+
    theme_Bede()+
  ylab("Standardised Reflectance") +
  xlab("Wavelength (nm)") +
    xlim(c(400,900))+
  theme(
    legend.position = c(0.15, 0.8),
    legend.text = element_text(size = 12),
    legend.text.align = 0,
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12)
  )
)

##### ALL

speclib_Resampled <-  speclib %>% 
  mutate(Sensor = "ASD") %>% 
  rbind(Ref_Prisma, Ref_S2, Ref_Pleiades) %>% 
  mutate(y = case_when(Sensor == "ASD" ~ 0,
                       Sensor == "Prisma" ~ 0.05,
                       Sensor == "Sentinel-2" ~ 0.1,
                       Sensor == "Pleiades" ~ 0.15))


unique(speclib_Resampled$Sensor)

speclib_Resampled$Sensor <- factor(speclib_Resampled$Sensor, levels = c(
  "ASD",
  "Prisma",
  "Sentinel-2",
  "Pleiades"
))


Plot_animated_resampled <- speclib_Resampled %>% 
  mutate(Sensor_fading = Sensor) %>% 
  ggplot(aes(x = Wavelength, y = Ref, color = Class, group = Class)) +

    # Smooth transitioning spectra
    geom_line(
      linewidth = 1.5
    ) +

    # Text that only fades in/out
    geom_text(
      aes(x = 800, y = 0.05, label = Sensor, group = Sensor_fading),
      size = 10,
      inherit.aes = FALSE
    ) +

    # Small ticks at each Wavelength (bottom side only)
    geom_rug(
      aes(x = Wavelength, group = Sensor),
      sides = "b",           # bottom only
      color = "red",
      length = unit(6, "pt"),
      linewidth = 1 # short tick
    ) +

    # Color scale and labels
    scale_color_manual(values = colscale) +
    ylab("Standardised Reflectance") +
    xlab("Wavelength (nm)") +
    xlim(c(400, 900)) +

    # Animate sensor changes globally
    transition_states(Sensor,
                      transition_length = 5,
                      state_length = 30) +
    ease_aes("sine-in-out") +

    # Theme and styling
    theme_Bede() +
    theme(
      legend.position = c(0.15, 0.8),
      legend.text = element_text(size = 12),
      legend.text.align = 0,
      axis.text.x = element_text(size = 12),
      axis.text.y = element_text(size = 12)
    )

rendered <- animate(Plot_animated_resampled, duration = 5, fps = 20, width = 8, height = 6, units = "in", res = 300, end_pause = 1, rewind = F, renderer = gifski_renderer(loop = T))

anim_save("Images/Part1/Figure_SRF_all.gif", animation = rendered)



#### ZOOMED


Plot_animated_resampled_zoomed <- speclib_Resampled %>% 
  mutate(Sensor_fading = Sensor) %>% 
  dplyr::filter(Wavelength < 670) %>% 
  ggplot(aes(x = Wavelength, y = Ref, color = Class, group = Class)) +

    # Smooth transitioning spectra
    geom_line(
      linewidth = 1.5
    ) +

    # Text that only fades in/out
    geom_text(
      aes(x = 600, y = 0.9, label = Sensor, group = Sensor_fading),
      size = 10,
      inherit.aes = FALSE
    ) +

    # Small ticks at each Wavelength (bottom side only)
    geom_rug(
      aes(x = Wavelength, group = Sensor),
      sides = "b",           # bottom only
      color = "red",
      length = unit(6, "pt"),
      linewidth = 1 # short tick
    ) +

    # Color scale and labels
    scale_color_manual(values = colscale) +
    ylab("Standardised Reflectance") +
    xlab("Wavelength (nm)") +
    xlim(c(400, 670)) +

    # Animate sensor changes globally
    transition_states(Sensor,
                      transition_length = 5,
                      state_length = 30) +
    ease_aes("sine-in-out") +

    # Theme and styling
    theme_Bede() +
    theme(
      legend.position = c(0.15, 0.8),
      legend.text = element_text(size = 12),
      legend.text.align = 0,
      axis.text.x = element_text(size = 12),
      axis.text.y = element_text(size = 12)
    )

rendered_zoomed <- animate(Plot_animated_resampled_zoomed, duration = 5, fps = 20, width = 8, height = 6, units = "in", res = 300, end_pause = 1, rewind = F, renderer = gifski_renderer(loop = T))

anim_save("Images/Part1/Figure_SRF_all_zoomed.gif", animation = rendered_zoomed)

```

::: {.absolute top="15%" left="0%" .fragment .fade-in-then-out fragment-index="8"}
![](Images/Part1/Figure_SRF_all_ASD.png){height="1000"}
:::

::: {.absolute top="15%" right="15%" .fragment .fade-in-then-out fragment-index="8"}
![](Images/Part1/ASD_show.jpeg){height="1000"}
:::

:::{.absolute top="15%" right="3%" .fragment .fade-in-then-out fragment-index="8" style="width: 300px; text-align: left;  font-size: 60px;"}
ASD FieldSpec Handheld 2
:::

:::{.absolute top="45%" right="3%" .fragment .fade-in-then-out fragment-index="8" style="width: 300px; text-align: left;  font-size: 60px;"}
Hyperspectral Sensor
:::

:::{.absolute bottom="8%" right="3%" .fragment .fade-in-then-out fragment-index="8" style="width: 300px; text-align: left;  font-size: 60px;"}
A lot of Narrow Spectral Bands
:::

::: {.absolute top="15%" left="0%" .fragment .fade-in-then-out fragment-index="9"}
![](Images/Part1/Figure_SRF_all.gif){height="1000"}
:::

::: {.absolute top="15%" left="0%" .fragment .fade-in fragment-index="10"}
![](Images/Part1/Figure_SRF_all_zoomed.gif){height="1000"}
:::

::: {.fragment .fade-out fragment-index="11"}
::: {.absolute top="15%" right="0%" .fragment .fade-in fragment-index="9"}
![](Images/Part1/Fig_SpectralResolution.png){height="1000"}
:::
:::

:::{.absolute bottom="15%" left="55%" .fragment .fade-in fragment-index="11" style="width: 1200px; text-align: left;  font-size: 80px;"}
- Is is possible to discriminate **green macrophytes** using remote sensing techniques ? 

:::

:::{.absolute top="20%" left="55%" .fragment .fade-in fragment-index="11" style="width: 1200px; text-align: left;  font-size: 80px;"}
- What is the impact of the **spectral resolution** on the discrimination accuracy ?
:::

## Material & Methods


```{r Map Spectral library}
#| echo: false
#| eval: false
#| warning: false

library(sf)
library(tidyverse)
library(Utilities.Package)


land_mask <- read_sf("Data/Part1/Maks_land_SPain_Portugal_France.shp")

Sampling_points <- tibble(
  Country = c("France", "France","France","France", "France","France", "Portugal", "Portugal", "Spain", "Spain"),
  Site = c("Mont Saint Michel Bay","Auray Estuary", "Morbihan Gulf","Traict of Merquel", "Bourgneuf Bay", "Marennes-Oléron Bay", "Aveiro Coastal Lagoon","Tagus Estuary", "Cadiz Bay", "Baiona Beach"),
  x = c( -1.616884,-2.956158,  -2.811063, -2.464984, -2.108862, -1.147721, -8.693682, -9.059694, -6.223569, -5.773462),
  y = c(48.661632,47.627424,47.580383, 47.418887,47.008546,45.926925,40.679758,38.756048,36.492337, 36.087565)) 

# plot(Sampling_points)
# 
# ggplot()+
#   geom_sf(data = land_mask)+
#   geom_sf(data = Sampling_points)

my_sf_simple <- rmapshaper::ms_simplify(land_mask, keep = 0.05)  # Simplify to 5% of points


bbox <- st_bbox(c(xmin = -15, xmax = 0, ymin = 35, ymax = 50), crs = st_crs(land_mask)) %>% 
  st_as_sfc()

# Crop using st_intersection
land_mask <- st_intersection(land_mask, bbox)


(
Sampling_plot <-
ggplot() +
  geom_sf(data = my_sf_simple, linewidth = 0.05, alpha = 0.93, fill = "grey80") +
      coord_sf(xlim=c(-15,0) ,
                ylim=c(35,50),
               expand = F ) +
  ggforce::geom_mark_ellipse(data=Sampling_points,
                 aes(x=x,
                     y=y,
                     label = Country,
                     group = Site,
                     description=Site),
                     # x0 = -22),
                 size=0.2,
                 # position = "jitter",
                 fill = "goldenrod",
                 con.colour = "goldenrod4",
                 show.legend=F,
                 label.fontsize = 15,
                 label.hjust = 0.5,
                 con.size = 0.5,
                 alpha=0.8,
  expand = unit(2, "mm") ,
  radius = unit(2, "mm") ,
  label.fill = "grey90",
  label.buffer = unit(5, "mm")) +
    theme_void()+
  # theme_Bede_Map()+
  # labs(x="Longitude",
       # y="Latitude")+
  # geom_label(aes(x = 521000, y = 4507794, label = "C"), size = 20)+
  # scale_x_continuous(breaks = seq(-8.70, -8.60, by = 0.10))+
  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm") ,
        legend.position = "none",
        axis.title = element_blank()
        # axis.text.x = element_text(size = 20),
        # axis.text.y = element_text(size = 20)
        )
)

ggsave(filename = "Images/Part1/map_sampling.svg", 
       plot = Sampling_plot, 
       width = 7.03,
       height = 10, 
       units = "in")

```

::: {.fragment .fade-out fragment-index="1"}
::: {.absolute bottom="-8%" right="-8%"}
![](Images/Part1/Map_Sampling2.png){height="1400"}
:::


::: {.absolute top="15%" left="40%"}
![](Images/Part1/ASD1.png){height="435"}
:::

::: {.absolute top="15%" left="58.5%"}
![](Images/Part1/ASD2.png){height="435"}
:::

::: {.absolute top="50%" left="40%"}
![](Images/Part1/Figure1_Bede.jpg){height="578"}
:::
:::


::: {.fragment .fade-out fragment-index="2"}

::: {.absolute top="6.5%"}
*Building a Spectral library of intertidal vegetation*
:::


::: {.absolute top="10%" left="0%"}
![](Images/Part1/SPECIESTABLE.png){height="1100"}
:::

:::{.absolute bottom="0%" left="0%" style="width: 1200px; text-align: left;  font-size: 60px;"}
Total of 332 Spectra of 5 taxonomic classes
:::
:::


::: {.absolute top="10%" left="40%".fragment .fade-in-then-out fragment-index="1" style="font-size: 60px;"}
2 instruments 
:::

::: {.absolute top="15%" left="40%".fragment .fade-in-then-out fragment-index="1" style="font-size: 40px;"}
- GER 3700 and ASD Fieldspec handheld 2
:::

::: {.absolute top="25%" left="40%".fragment .fade-in-then-out fragment-index="1" style="font-size: 60px;"}
Calibration
:::

::: {.absolute top="30%" left="40%".fragment .fade-in-then-out fragment-index="1" style="font-size: 40px;"}
- Optimisation of the integration time
- Dark noise calibration
- Measurement of Radiance with a 99% Spectralon white reference
:::

::: {.absolute top="50%" left="40%".fragment .fade-in-then-out fragment-index="1" style="font-size: 60px;"}
Sampling method
:::

::: {.absolute top="55%" left="40%".fragment .fade-in-then-out fragment-index="1" style="font-size: 40px;"}
- Operator angled at 90° to the sun
- At least 10 replicate for each sample
- 30 to 50cm from the ground
- Field of view of the instrument set to ~ 3.5°
:::

::: {.absolute top="80%" left="50%" .fragment .fade-in-then-out fragment-index="1" style="font-size: 50px;"}

$R(\lambda)_{\rm sample} = \frac{1}{n}\sum_{i=1}^{n}R_i(\lambda), \quad\text{with }n \ge 10$

:::


::: {.fragment .fade-out fragment-index="4"}
::: {.absolute .fragment .fade-in fragment-index="2" top="6.5%"}
*Spectral degradation*
:::
:::
```{r SRF all}
#| echo: false
#| eval: false
#| warning: false

library(tidyverse)
library(Utilities.Package)
library(gganimate)


VEG_s<-read_csv("Data/SRF/ASD_forPaper.csv")

ASD_func<-VEG_s %>% 
  dplyr::rename(band=Wavelength) %>% 
  dplyr::mutate(Largeur=1) %>% 
  expand_grid(Wavelength=seq(from=round(min(.$band) ),
                             to=round(max(.$band) )) ) %>% 
  dplyr::mutate(sigma=Largeur/(2*sqrt(2*SciViews::ln(2) )) ,
                val=exp(-(((Wavelength-band)^2)/(2*sigma^2) )) ,
                band=as.character(band) ) %>% 
  dplyr::select(-c(Largeur,sigma) )%>% 
  dplyr::mutate(Data="ASD")

Pleiades_func<-read.table("Data/SRF/band_function_Pleiades.txt",
                          header = T) %>% 
  dplyr::mutate(Wavelength=as.integer(Wavelength*1000) ) %>% 
  dplyr::select(-P_1_PAN) %>% 
  pivot_longer(2:ncol(.) ,names_to = "band",values_to = "val") %>% 
  dplyr::mutate(Data="Pleiades") 

S2_10_func<-read.table("Data/SRF/band_function_S2A.txt",
                          header = T)%>% 
  dplyr::select(Wavelength, S2A_2, S2A_3, S2A_4,S2A_8)%>% 
  pivot_longer(2:ncol(.) ,names_to = "band",values_to = "val") %>% 
  dplyr::mutate(Data="Sentinel-2 10m")

S2_1020_func<-read.table("Data/SRF/band_function_S2A.txt",
                          header = T)%>% 
  dplyr::select(Wavelength,  S2A_2, S2A_3, S2A_4, S2A_5, S2A_6, S2A_7, S2A_8, S2A_8A)%>% 
  pivot_longer(2:ncol(.) ,names_to = "band",values_to = "val") %>% 
  dplyr::mutate(Data="Sentinel-2 20m")

Drone_func<-read_csv("Data/SRF/band_function_Drone.csv")%>% 
  pivot_longer(2:ncol(.) ,names_to = "band",values_to = "val") %>% 
  dplyr::mutate(Data="Drone")


PRISMA_func<-read_csv("Data/SRF/band_function_PRISMA.csv") %>% 
  dplyr::rename(band=Wavelength) %>% 
  expand_grid(Wavelength=seq(from=round(min(.$band) ),
                             to=round(max(.$band) )) ) %>% 
  dplyr::mutate(sigma=Largeur/(2*sqrt(2*SciViews::ln(2) )) ,
                val=exp(-(((Wavelength-band)^2)/(2*sigma^2) )) ,
                band=as.character(band) ) %>% 
  dplyr::select(-c(Largeur,sigma) )%>% 
  dplyr::mutate(Data="PRISMA")

functions<-bind_rows(ASD_func,Pleiades_func,S2_10_func,
                     S2_1020_func,Drone_func,PRISMA_func) %>% 
  dplyr::select(band,Wavelength,Data,val)%>% 
  dplyr::filter(Wavelength<901 & Wavelength>400) %>% 
  dplyr::mutate(Data=as.factor(Data) ,
                Data=fct_relevel(Data, c("ASD",
                                         "PRISMA",
                                         "Drone",
                                         "Sentinel-2 20m",
                                         "Pleiades",
                                         "Sentinel-2 10m") ))

plot_SRF <- ggplot(functions, aes(x = Wavelength, y = val, group = band)) +
  geom_line(alpha = 0.6, colour = "darkcyan", linewidth = 1) +
  labs(
    title = "{closest_state}",         # <-- dynamic title
    x     = "Wavelength (nm)",
    y     = NULL
  ) +
  scale_x_continuous(limits = c(400, 900)) +
  theme_Bede() +
  theme(
    plot.title  = element_text(size = 18, face = "bold", hjust = 0.05),
    plot.margin = unit(c(1.25, 1.25, 1.25, 1.25), "cm")
  ) +
  transition_states(
    Data,
    transition_length = 5,
    state_length      = 30
  ) +
  ease_aes("sine-in-out")

# coucouo <- "coucou"
# 
# functions %>%
#   dplyr::filter(Data == "Drone") %>% 
#   ggplot(aes(x=Wavelength,
#                   y=val) )+
#   geom_line(aes(group=band) ,
#             alpha=0.6,
#             colour="darkcyan",
#             linewidth=1) +
#   labs(y=" ",
#        x="Wavelength (nm)") +
#   # ggtitle(unique(Data))+
#   scale_x_continuous(limits =c(400,900) )+
#   # facet_wrap(~Data,ncol=2, scales = "free_x") +
#   theme_Bede()+
#     theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "cm"),
#           strip.text = element_text(size=14),
#           legend.title = element_text(size=12),
#           legend.text = element_text(size=14))


rendered_zoomed <- animate(plot_SRF, duration = 10, fps = 20, width = 8, height = 6, units = "in", res = 300, end_pause = 1, rewind = F, renderer = gifski_renderer(loop = T))

anim_save("Images/Part1/Figure_SRF_all_sensors.gif", animation = rendered_zoomed)
```


::: {.absolute .fragment .fade-in-then-out fragment-index="2" top="10%" left="0%"}
![](Images/Part1/Figure_SRF_all_sensors.gif){height="800"}
:::


::: {.fragment .fade-out fragment-index="4"}
::: {.absolute .fragment .fade-in fragment-index="2" bottom="2%" left="0%"}
![](Images/Part1/ASD.png){height="100"}
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="0%" left="18%"}
![](Images/Part1/PRISMA.png){height="150"}
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="0%" left="36%"}
![](Images/Part1/Micasense.png){height="150"}
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="0%" right="36%"}
![](Images/Part1/Sentinel-2_20m.png){height="150"}
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="0%" right="18%"}
![](Images/Part1/pleiades.png){height="150"}
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="0%" right="0%"}
![](Images/Part1/Sentinel-2.jpg){height="150"}
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="20%" left="3%"}
**ASD**
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="20%" left="18%"}
**PRISMA**
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="20%" left="38%"}
**Drone**
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="20%" right="38%"}
**S2 - 20m**
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="20%" right="18%"}
**Pléiades**
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="20%" right="1%"}
**S2 - 10m**
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="15%" left="0%"}
500 bands
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="15%" left="17.5%"}
50 Bands
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="15%" left="37%"}
10 Bands
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="15%" right="38%"}
8 Bands
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="15%" right="18%"}
4 Bands
:::

::: {.absolute .fragment .fade-in fragment-index="2" bottom="15%" right="1%"}
4 Bands
:::


```{r Spectra resampled}
#| echo: false
#| eval: false
#| warning: false

library(tidyverse)
library(Utilities.Package)
library(gganimate)

DataCombo <- read.csv("Data/Part1/DataCombo.csv")%>% 
  dplyr::filter(Data %in% c("ASD","Drone","Sentinel-2 10m")) 

DataCombo$Data <- factor(DataCombo$Data, levels = c(
  "ASD","Drone","Sentinel-2 10m"
  # "PRISMA",
  
  # # "Sentinel-2 20m",
  # # "Pleiades",
  
)) 

### Just chloro and Magno
colscale <- c("Magnoliopsida" = "#598f35", "Ulvophyceae" = "#c4fb58")

plot_SRF_sp <- DataCombo %>% 
  as_tibble() %>% 
  dplyr::filter(
    Species_Group %in% c("Magnoliopsida","Ulvophyceae","Phaeophyceae","Bacillariophyceae"),
                Data == "Drone") %>%
  ggplot(aes(x=Wavelength,
                  y=Mean_Reflec) ) +
  geom_ribbon(aes(ymin=lwr_Reflec,
                  ymax=upr_Reflec,
                  fill=Species_Group) ,
              alpha=0.4)+ 
  geom_line(aes(colour=Species_Group) ,
            linewidth=0.9) +
  labs(
    # title = "{closest_state}",         # <-- dynamic title
    x     = "Wavelength (nm)",
    y     = "Reflectance "
  ) +
  scale_x_continuous(limits =c(400,900) )+
  facet_wrap(~Data,ncol=2, scales = "free_x") +
  # scale_fill_manual(name="Class",values = colscale, labels = c("Magnoliopsida","Chlorophyceae")) +
  # scale_colour_manual(name="Class",values = colscale, labels = c("Magnoliopsida","Chlorophyceae")) +
  scale_fill_Bede(name="Class","Macro5_Pub") +
  scale_colour_Bede(name="Class","Macro5_Pub") +
  theme_Bede()+
    theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "cm"),
          strip.text = element_text(size=14),
          legend.title = element_text(size=14),
          legend.text = element_text(size=14),
          legend.direction = "vertical",
          legend.position = "top",
          legend.justification = "center")+
  guides(fill=guide_legend(ncol=3),
         colour=guide_legend(ncol=3))
  # transition_states(
  #   Data,
  #   transition_length = 5,
  #   state_length      = 30
  # ) +
  # ease_aes("sine-in-out")

rendered <- animate(plot_SRF_sp, duration = 10, fps = 20, width = 8, height = 6, units = "in", res = 300, end_pause = 1, rewind = F, renderer = gifski_renderer(loop = T))

anim_save("Images/Part1/Figure_resampled_spectra.gif", animation = rendered)


  ggsave(filename = "Images/Part1/Figure_spectra3_green.pdf", 
       plot = plot_SRF_sp, 
       width = 10,
       height = 10, 
       units = "in")
```

:::



::: {.absolute .fragment .fade-in-then-out fragment-index="3" top="10%" left="0%"}
![](Images/Part1/Figure_SRF_all_sensors.gif){height="800"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="3" top="0%" right="0%"}
![](Images/Part1/Figure_resampled_spectra.gif){height="1000"}
:::

::: {.fragment .fade-out fragment-index="7"}
::: {.absolute .fragment .fade-in fragment-index="4" top="6.5%"}
*Spectral comparisons*
:::

:::{.absolute top="15%" left="0%" .fragment .fade-in fragment-index="4" style="text-align: left;  font-size: 60px;"}
**Compare the Spectra:** 

- nMDS + ANOSIM for each spectral resolution
:::

::: {.absolute .fragment .fade-in fragment-index="4" top="5%" left="60%"}
![](Images/Part1/nMDS_MM.png){height="400"}
:::

:::{.absolute top="40%" left="0%" .fragment .fade-in fragment-index="5" style="text-align: left;  font-size: 60px;"}
**Compare the Sensors:** 

- Supervised Machine Learning Classifiers
:::

:::{.absolute top="55%" left="5%" .fragment .fade-in-then-out fragment-index="5" style="text-align: left;  font-size: 60px;"}
- Random Forest
- XGBoost 
- SVM
- ...
:::

::: {.absolute .fragment .fade-in-the-out fragment-index="5" top="35%" left="60%"}
![](Images/Part1/tidymodels.png){height="400"}
:::

:::{.absolute top="55%" left="5%" .fragment .fade-in fragment-index="6" style="text-align: left;  font-size: 60px;"}
- Random Forest 
:::
::: {.absolute .fragment .fade-in fragment-index="6" top="35%" left="60%"}
![](Images/Part1/random-forests.jpg){height="400"}
:::



:::{.absolute top="70%" left="5%" .fragment .fade-in-then-out fragment-index="6" style="text-align: left;  font-size: 60px;"}
**Spliting of the dataset:**

- 75 % for training
- 25 % for testing
:::

:::{.absolute top="70%" left="35%" .fragment .fade-in-then-out fragment-index="6" style="text-align: left;  font-size: 60px;"}
**Tuning of hyperparameters:**

- Maximisation of the AUC-ROC
:::

:::{.absolute top="70%" left="75%" .fragment .fade-in-then-out fragment-index="6" style="text-align: left;  font-size: 60px;"}
**Validation:**

- Accuracy metrics
- Variable Importance
:::
:::

::: {.absolute .fragment .fade-in fragment-index="7" top="6.5%"}
*Putting theory into practice*
:::

```{r Map Drone Flights}
#| echo: false
#| eval: false
#| warning: false

library(sf)
library(tidyverse)
library(Utilities.Package)

land_mask <- read_sf("Data/Part1/Maks_land_SPain_Portugal_France.shp")

Sampling_points <- tibble(
  Country = c("France", "France","France","France", "France","France", "Portugal", "Portugal","Portugal", "Spain", "Spain"),
  Site = c("Arz Island","Duer","L'Epine", "Barbâtre", "Notre-Dame De Tremor", "Pont Du Guilly","Mataducos","Marinha Lanzarote","Gafanha", "Marisma de Cudon","Marisma de Cortiguera"),
  x = c(-2.795421, -2.746693, -2.227908,  -2.167879, -3.746980,  -3.655206, -8.647991, -8.682370,  -8.743255, -4.025298, -4.032117),
  y = c(47.603054, 47.541086,46.989746,46.956383,47.836484,47.822825, 40.666879, 40.666201,40.599341,43.406445,43.414978)) 

# plot(Sampling_points)
# 
# ggplot()+
#   geom_sf(data = land_mask)+
#   geom_sf(data = Sampling_points)

my_sf_simple <- rmapshaper::ms_simplify(land_mask, keep = 0.05)  # Simplify to 5% of points


bbox <- st_bbox(c(xmin = -15, xmax = 0, ymin = 35, ymax = 50), crs = st_crs(land_mask)) %>% 
  st_as_sfc()

# Crop using st_intersection
land_mask <- st_intersection(land_mask, bbox)


(
Sampling_plot <-
ggplot() +
  geom_sf(data = my_sf_simple, linewidth = 0.05, alpha = 0.93, fill = "grey80") +
      coord_sf(xlim=c(-15,0) ,
                ylim=c(35,50),
               expand = F ) +
  ggforce::geom_mark_ellipse(data=Sampling_points,
                 aes(x=x,
                     y=y,
                     label = Country,
                     group = Site,
                     description=Site),
                     # x0 = -22),
                 size=0.2,
                 # position = "jitter",
                 fill = "goldenrod",
                 con.colour = "goldenrod4",
                 show.legend=F,
                 label.fontsize = 15,
                 label.hjust = 0.5,
                 con.size = 0.5,
                 alpha=0.8,
  expand = unit(2, "mm") ,
  radius = unit(2, "mm") ,
  label.fill = "grey90",
  label.buffer = unit(5, "mm")) +
    theme_void()+
  # theme_Bede_Map()+
  # labs(x="Longitude",
       # y="Latitude")+
  # geom_label(aes(x = 521000, y = 4507794, label = "C"), size = 20)+
  # scale_x_continuous(breaks = seq(-8.70, -8.60, by = 0.10))+
  theme(plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm") ,
        legend.position = "none",
        axis.title = element_blank()
        # axis.text.x = element_text(size = 20),
        # axis.text.y = element_text(size = 20)
        )
)

ggsave(filename = "Images/Part1/map_Drone.svg", 
       plot = Sampling_plot, 
       width = 7.03,
       height = 10, 
       units = "in")

```

::: {.fragment .fade-out fragment-index="9" }
::: {.absolute .fragment .fade-in fragment-index="7" bottom="-8%" right="-7.6%"}
![](Images/Part1/Map_Drone-01.png){height="1400"}
:::
:::


::: {.absolute .fragment .fade-in-then-out fragment-index="7" top="15%" left="5%"}
::: {.absolute bottom="-5%" left="30%"}
DJI Matrice 200
:::

![](Images/Part1/Matrice_Hermelle.jpg){height="450" .circular-fade}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="7" top="15%" left="40%"}
::: {.absolute bottom="-5%" left="20%"}
Micasense RedEdge-MX Dual
:::

![](Images/Part1/MicasenseCamera.jpg){height="450" .circular-fade}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="7" bottom="-2%" left="3%"}
![](Images/Part1/micasense_bands.png){height="550"}
:::


```{r Table1 building}
#| cache: false
#| echo: false
#| eval: false
#| warning: false

library(tidyverse)
library(flextable)
library(officer)

# your data …
df <- data.frame(
  Country = c(rep("France",7), rep("Spain",2), rep("Portugal",4)),
  Site    = c("Aven","Belon", rep("Gulf of Morbihan",3), rep("Bourgneuf Bay",2),
              rep("Saja Estuary",2), rep("Aveiro Lagoon",4)),
  Name    = c("Pont de Guilly","Notre-dame de Tremor","Arz Island","Duer","Duer",
              "Barbâtre","L'Epine","Marisma de Cudon","Marisma de Cortiguera",
              "Marinha Lanzarote","Mataducos","Gafanha","Gafanha"),
  Altitude= c("120m","120m","12m","12m","120m","120m","120m","120m",
              "120m","120m","120m","120m","12m"),
  Utility = c("Training / Validation","Training / Validation","Training","Training",
              "Validation","Validation","Validation","Training / Validation",
              "Training / Validation","Validation","Validation","Validation","Training"),
  Date    = c("11/04/2024","11/04/2024","29/09/2022","14/07/2022","14/07/2022",
              "07/09/2021","08/07/2021","25/06/2024","25/06/2024","17/06/2022",
              "16/06/2022","15/06/2022","15/06/2022"),
  Project = c(rep("InvaSea",2), rep("BiCOME",5), rep("InvaSea",2), rep("BiCOME",4))
)

# define borders
brdr_outer <- fp_border(color = "black", width = 1)
brdr_inner <- fp_border(color = "gray80", width = 0.5)

ft <- flextable(df) %>%
  merge_v(j = c("Country","Site")) %>%
  set_table_properties(layout = "fixed") %>%
  width(j = "Country",  width = 1.2) %>%
  width(j = "Site",     width = 1.6) %>%
  width(j = "Name",     width = 2.4) %>%
  width(j = "Altitude", width = 0.8) %>%
  width(j = "Utility",  width = 1.4) %>%
  width(j = "Date",     width = 1.2) %>%
  width(j = "Project",  width = 1.2) %>%
  theme_booktabs() %>%
  border_outer(border = brdr_outer) %>%
  border_inner_h(border = brdr_inner) %>%
  border_inner_v(border = brdr_inner) %>%
  # zebra striping: even rows get light gray
  bg(i = seq(2, nrow(df), by = 2), bg = "#f7f7f7", part = "body") %>%
  bg(j = 1:2, bg = "white", part = "body") %>%

  fontsize(size = 10, part = "all") %>%
  padding(padding = 5, part = "all") %>%
  align(align = "center", part = "all") %>%
  autofit()

ft

save_as_image(ft, "Images/Part1/table_flights.png", res = 400)

```


::: {.absolute .fragment .fade-in-then-out fragment-index="8" top="10%" left="0%"}
![](Images/Part1/table_flights.png){width="1950"}
:::


::: {.fragment .fade-out fragment-index="10"}
::: {.absolute .fragment .fade-in fragment-index="9" top="10%" left="0%"}
![](Images/Part1/table_flights2.png){width="1950"}
:::

::: {.absolute .fragment .fade-in fragment-index="9" top="45%" left="3%"}
![](Images/Part1/grid_high_low.png){width="650"}
:::


::: {.absolute .fragment .fade-in fragment-index="9" bottom="-8%" right="-7.6%"}
![](Images/Part1/Map_Drone-02.png){height="1400"}
:::

::: {.absolute top="60%" left="35%" .fragment .fade-in fragment-index="9" style="font-size: 60px;"}
Sentinel-2: 100 pixels/hectar

Drone 120 m: ~1 500 000 pixels/hectar

Drone 12 m: ~15 000 000 pixels/hectar
:::
:::

::: {.absolute .fragment .fade-in fragment-index="10" top="15%" left="0%"}
::: {.absolute top="-7%" left="20%"}
50% Spectralon
:::

![](Images/Part1/Spectralon_micasense.jpg){height="500" .circular-fade}
:::

::: {.absolute .fragment .fade-in fragment-index="10" bottom="0%" left="0%"}
::: {.absolute top="-7%" left="5%"}
Downwelling Light Sensor
:::
![](Images/Part1/DLS.jpg){height="500" .circular-fade}
:::


```{r Figure3 text opening}
#| cache: true
#| echo: false
#| eval: false
#| warning: false

layout<-"Data/Part1/" %>%
  list.files("V5.txt",full.names = T, recursive = T) %>%
  read_delim(delim = "\t", escape_double = FALSE,
    trim_ws = TRUE) %>%
  dplyr::filter(Evaluate == T)


layout$Text<- gsub("alaligne","\n", layout$Text)

boxes<- layout %>% 
  dplyr::filter(Type == "Box",
                shape == "square")


text<- layout %>% 
  dplyr::filter(Type == "Box")

diamonds<- layout %>% 
  dplyr::filter(Type == "Box",
                shape == "diamond")
diff = 0.1
for (i in 1:nrow(diamonds)) {
  diam_a<-diamonds[i,]
  
df<-data.frame(  
  x = c(diam_a$xmin - diff, diam_a$xmin + diff, diam_a$xmax + diff, diam_a$xmax - diff),
  y = c(diam_a$ymin, diam_a$ymax, diam_a$ymax, diam_a$ymin),
  Type = rep(diam_a$Type,4),
  Text = rep(diam_a$Text,4),
  Color = rep(diam_a$color,4),
  Evaluate = rep(diam_a$Evaluate,4),
  Resolution =  rep(diam_a$Resolution,4),
  Evaluate_bigbox = rep(diam_a$Evaluate_bigbox,4),
  alpha = rep(diam_a$alpha,4),
  shape =  rep(diam_a$shape,4)
)
  if(i == 1){
    diamond_list<-list(df)
  }else{
    diamond_list[[i]]<-df
  }
}



Arrows<- layout %>% 
  dplyr::filter(Type == "Arrow",
                Evaluate == T)

Group_box<-layout %>% 
  dplyr::filter(Type == "Box",
                Evaluate_bigbox == T) %>% 
  group_by(Group) %>% 
  dplyr::summarise(xmin = min(xmin)-0.1,
                   xmax = max(xmax)+0.1,
                   ymin = min(ymin)-0.1,
                   ymax = max(ymax)+0.1,
                   alpha = 0.1,
                   color = color)

resolution_box<-layout %>% 
  dplyr::filter(Type == "Box",
                Resolution != "NA") %>% 
  group_by(Resolution) %>% 
  dplyr::summarise(xmin = min(xmin)-0.1,
                   xmax = max(xmax)+0.1,
                   ymin = min(ymin)-0.1,
                   ymax = max(ymax)+0.1,
                   alpha = 0.1,
                   color = color)

legend = data.frame(color = unique(layout$color)) %>% 
  dplyr::filter(!is.na(color)) %>% 
  mutate(label = case_when(color == "#EA6155" ~ "Input Data",
                           color == "#DC9614" ~ "Pre-processing",
                           color == "#52A4DA" ~ "Model Building",
                           color == "#79DA52" ~ "Validation",
                           color == "#DA9652" ~ "Output Data",
                           color == "darkcyan" ~ "Final Product",
                           color == "#DA5273"  ~ "Prediction",
                           TRUE ~ "NA")) %>% 
  arrange

segment<-layout %>% 
  dplyr::filter(Type == "Segment")
  

```

```{r Figure3 building}
#| cache: true
#| echo: false
#| warning: false
#| eval: false

building <- F

if(building == T){
  
text_size = 6 #### 6 to plot it fullscreen in R,  1.8 for exporting with ggsave
line_size =1 ####arrow_size 0.3 to export  1 to for R plotting

legend_size = 1 #### 0.3 to export, 1 for R ploting
legend_text = 10 #### 4 to export, 10 for R ploting
}else{
  
text_size = 1.85 #### 6 to plot it fullscreen in R,  1.8 for exporting with ggsave
line_size =0.3 ####arrow_size 0.3 to export  1 to for R plotting

legend_size = 0.3 #### 0.3 to export, 1 for R ploting
legend_text = 5 #### 5 to export, 10 for R ploting
  
}


a<-ggplot()+
  
  statebins:::geom_rrect(data = Group_box,
            mapping = aes(xmin = xmin,
                          xmax= xmax,
                          ymin = ymin,
                          ymax = ymax),
            alpha = 0.05,
            size = 0.2,
            show.legend = F,
            fill = Group_box$color,
            color = "black")+
  
    statebins:::geom_rrect(data = resolution_box,
            mapping = aes(xmin = xmin,
                          xmax= xmax,
                          ymin = ymin,
                          ymax = ymax,
                          alpha = rep(c("Input Data", "Pre-processing", "Model Building", "Prediction", "Validation", "Output Data", "Final Product"),2)),
            fill = "NA",
            linetype = 2,
            size = 0.4,
            color = "black")+
  
  scale_alpha_manual(name = "", 
                     values = c(1,1,1,1,1,1,1),
                     labels = c("Input Data", "Pre-Processing", "Model Building", "Prediction", "Validation", "Output Data", "Final Product"),
                     guide = guide_legend(ncol = 1, override.aes = list(fill = c("#f94144", "#f3722c", "#f8961e", "#f9c74f", "#90be6d", "#43aa8b", "#577590"),
                                                                        shape = c(22),
                                                                        linetype = c(1),
                                                                        alpha = c(0.5)
                                                                        )
                                          )
                     )+
  
  statebins:::geom_rrect(data = boxes,
            mapping = aes(xmin = xmin,
                          xmax= xmax,
                          ymin = ymin,
                          ymax = ymax
                          ),
            size = 0.2,
            alpha = as.numeric(boxes$alpha),
            fill = boxes$color,
            color = "black")
  
  for(i in 1:length(diamond_list)){
    poly_i<-diamond_list[[i]]
    a<-a+
      geom_polygon(data = poly_i, 
                   mapping = aes(x = x, 
                                 y = y
                                 ),
                  size = 0.2,
                   alpha = poly_i$alpha,
                   fill = poly_i$Color,
                   color = "black")
    
  }

if(building == T){
    a<-a+
    geom_text(data = text,
            mapping = aes(x = (xmax+xmin)/2, y = (ymax + ymin)/2, label = (ID)), size = text_size)
  
}else{
    a<-a+
    geom_text(data = text,
            mapping = aes(x = (xmax+xmin)/2, y = (ymax + ymin)/2, label = (Text)), size = text_size)
}


  a<-a+
    geom_segment(data = Arrows, aes( x = xmin, xend = xmax, y = ymin, yend = ymax),
    size=line_size, linejoin = "mitre", lineend = "butt",
    arrow = arrow(length = unit(1, "mm"), type= "closed")
    )+
    geom_segment(data = segment, aes( x = xmin, xend = xmax, y = ymin, yend = ymax),
    size=line_size, linejoin = "mitre", lineend = "square"
    )+
  
  geom_text(aes(x = -5.4, y = -2, label = "Flight height: 12 m \n Pixel size : 8 mm", angle = 90), size = text_size+1)+
  
  geom_text(aes(x = -5.4, y = -6.8, label = "Flight height: 120 m \n Pixel size : 80 mm", angle = 90), size = text_size+1)+
  
  geom_text(aes(x = 4, y = 1.75, label = "Pre Processing"), size = text_size)
    
  if(building == F){
  a<- a+ theme_void()
  }
  
  a<-a+
  theme(legend.position = c(0.88,0.3),
        legend.text = element_text(size = legend_text),
        legend.key.size = unit(legend_size, 'cm')
        )+
  scale_x_continuous(breaks = scales::breaks_width(0.5))+
  scale_y_continuous(breaks = scales::breaks_width(0.5))
  
if(building == T){
a
}else{
  ggsave(filename = "Images/Part1/Figure3_workflow.svg", 
       plot = a, 
       width = 10,
       height = 5.88, 
       units = "in")
}


```


::: {.absolute .fragment .fade-in-then-out fragment-index="10" bottom="0%" right="0%"}

![](Images/Part1/Figure3_workflow.png){width="1800"}
:::

::: {.absolute .fragment .fade-in fragment-index="10" top="0%" left="50%"}

![](Images/Part1/fastai.png){height="300"}
:::

::: {.absolute .fragment .fade-in fragment-index="10" top="0%" right="20%"}

![](Images/Part1/DISCOV_logoV2.png){height="300"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="11" bottom="0%" right="0%"}

![](Images/Part1/Figure3_workflow2.png){width="1800"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="12" bottom="0%" right="0%"}

![](Images/Part1/Figure3_workflow3.png){width="1800"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="13" bottom="0%" right="0%"}

![](Images/Part1/Figure3_workflow4.png){width="1800"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="14" bottom="0%" right="0%"}

![](Images/Part1/Figure3_workflow5.png){width="1800"}
:::

::: {.absolute .fragment .fade-in fragment-index="15" bottom="0%" right="0%"}

![](Images/Part1/Figure3_workflow6.png){width="1800"}
:::

## Results

```{r MDSPlotsWithoutBSData}
#| echo: false
#| warning: false
#| eval: false

library(hsdar)
library(vegan)

Data_MDS_List<-list() 

Data_hulls_List<-list() 

Data_AnoSIM_list<-list()

dataUntransformed <- read_rds("Data/Part1/dataUntransformed.rds")
datatransformed_Wide <- read_rds("Data/Part1/datatransformed_Wide.rds")

for (i in seq_along(datatransformed_Wide) ) {

Meta<-datatransformed_Wide[[i]]%>% 
  dplyr::filter(!Species_Group=="Bare Sediment") %>% 
  dplyr::select(Species,Species_Group)

Comm<-datatransformed_Wide[[i]]%>% 
  dplyr::filter(!Species_Group=="Bare Sediment")%>% 
  dplyr::select(-c(Substrate,Species_Group,Species) )  %>% 
  as.matrix() 

set.seed(4321)

speclib_data <- speclib(spectra=Comm, wavelength=as.numeric(colnames(Comm) ) ) 

set.seed(2345)

SAM <- sam_distance(speclib_data) 

ANOSIM<-anosim(SAM, grouping = Meta$Species_Group,permutations = 999)

Anosim_df<-data.frame(R=ANOSIM$statistic,
                      p=ANOSIM$signif) %>% 
  dplyr::mutate(Data=paste0(names(dataUntransformed)[[i]]) )

Data_AnoSIM_list[[i]]<-Anosim_df

mds_sam <- MASS::isoMDS(SAM,maxit = 50,trace=FALSE) 

MDS_sam <- mds_sam$points %>% 
    as_tibble()  %>% 
    dplyr::rename(x=V1,y=V2)  %>% 
    bind_cols(Meta)  %>% 
    dplyr::mutate(Stress=mds_sam$stress/100,
                  Data=paste0(names(dataUntransformed) [[i]]) ) 
  
  Data_MDS_List[[i]]<-MDS_sam
  
  Magnoliopsida_hull <- MDS_sam[MDS_sam$Species_Group == "Magnoliosida",
                               ][chull(MDS_sam[MDS_sam$Species_Group =="Magnoliosida",
                                               c("x", "y") ]) , ]
  
  
  Ulvophyceae_hull <- MDS_sam[MDS_sam$Species_Group == "Ulvophyceae",
                         ][chull(MDS_sam[MDS_sam$Species_Group =="Ulvophyceae",
                                         c("x","y") ]) , ]
  
  Phaeophyceae_hull <- MDS_sam[MDS_sam$Species_Group == "Phaeophyceae",
                               ][chull(MDS_sam[MDS_sam$Species_Group == "Phaeophyceae",
                                               c("x","y") ]) , ]
 
  Xanthophyceae_hull <- MDS_sam[MDS_sam$Species_Group == "Xanthophyceae",
                                 ][chull(MDS_sam[MDS_sam$Species_Group == "Xanthophyceae",
                                                 c("x","y") ]) , ]
   
  Bacillariophyceae_hull <- MDS_sam[MDS_sam$Species_Group == "Bacillariophyceae",
                                    ][chull(MDS_sam[MDS_sam$Species_Group =="Bacillariophyceae",
                                                    c("x","y") ]) , ]
  

  hulls <- rbind(Magnoliopsida_hull,
                 Ulvophyceae_hull,
                 Phaeophyceae_hull,
                 Xanthophyceae_hull,
                 Bacillariophyceae_hull)  %>% 
    dplyr::mutate(Data=paste0(names(dataUntransformed) [[i]]) ) 
  
    Data_hulls_List[[i]]<-hulls

  
  
}
  
MDSData_1<-map_df(Data_MDS_List,bind_rows)  %>% 
  dplyr::mutate(Data=as.factor(case_when(Data=="S2_10" ~ "Sentinel-2 10m",
                                         TRUE ~ Data) ) ,
                Data=fct_relevel(Data,"ASD",
                                          "Drone",
                                          "Sentinel-2 10m"))  

X_correct<-MDSData_1 %>% 
  group_by(Data) %>% 
  dplyr::summarise(x=min(x) ) %>% 
  left_join(MDSData_1) %>% 
  dplyr::select(Data,Species_Group) %>% 
  dplyr::filter(!Species_Group=="Phaeophyceae") %>% 
  dplyr::ungroup()

Y_correct<-MDSData_1 %>% 
  group_by(Data) %>% 
  dplyr::summarise(y=max(y) ) %>% 
  left_join(MDSData_1) %>% 
  dplyr::select(Data,Species_Group) %>% 
  dplyr::filter(!Species_Group=="Ulvophyceae") %>% 
  dplyr::ungroup()


MDSData<-MDSData_1 %>% 
  dplyr::mutate(x=case_when(Data%in%X_correct$Data~-x,
                            TRUE~x) ,
                y=case_when(Data%in%Y_correct$Data~-y,
                            TRUE~y) ,
                Species_Group=case_when(Species_Group=="Magnoliosida"~"Magnoliopsida",
                                        TRUE~Species_Group),
                Species_Group=factor(Species_Group,
                                     levels=c(
                                          "Bacillariophyceae",
                                          "Magnoliopsida",
                                          "Phaeophyceae",
                                          "Ulvophyceae",
                                          "Xanthophyceae") ) )

hullsData<-map_df(Data_hulls_List,bind_rows) %>% 
  dplyr::mutate(Data=as.factor(case_when(Data=="S2_10" ~ "Sentinel-2 10m",
                                         # Data=="S2_1020" ~ "Sentinel-2 20m",
                                         TRUE ~ Data) ) ,
                Data=fct_relevel(Data,c("ASD",
                                        "Drone",
                                        "Sentinel-2 10m"))) %>% 
  dplyr::mutate(x=case_when(Data%in%X_correct$Data~-x,
                            TRUE~x) ,
                y=case_when(Data%in%Y_correct$Data~-y,
                            TRUE~y),
                Species_Group=case_when(Species_Group=="Magnoliosida"~"Magnoliopsida",
                                        TRUE~Species_Group),
                Species_Group=factor(Species_Group,
                                     levels=c(
                                          "Bacillariophyceae",
                                          "Magnoliopsida",
                                          "Phaeophyceae",
                                          "Ulvophyceae",
                                          "Xanthophyceae")))

AnoSimData<-map_df(Data_AnoSIM_list,bind_rows) %>% 
  dplyr::mutate(Value=paste0("R= ",signif(R,3)," & p= ",signif(p,3) ),
                Data=as.factor(case_when(Data=="S2_10"~"Sentinel-2 10m",
                                         TRUE ~ Data) ) ,
                Data=fct_relevel(Data,c("ASD",
                                          "Drone",
                                          "Sentinel-2 10m") ))


Stress<-MDSData %>% 
  group_by(Data)  %>% 
  summarise(Stress=signif(mean(Stress) ,3) ) %>% 
  full_join(AnoSimData,by="Data")

Data.labs <-paste0(Stress$Data,"      Stress: ",Stress$Stress, ", \nANOSIM: ",Stress$Value) 

names(Data.labs)  <-  c("ASD","Drone","Sentinel-2 10m") 
```

```{r MDSPlotsWithoutBS}
#| echo: false
#| warning: false
#| eval: false

MDSData <- MDSData %>% 
  mutate(Species_Group = case_when(Species_Group == "Ulvophyceae" ~ "Chlorophyceae",
                                   T ~ Species_Group))

hullsData <- hullsData %>% 
  mutate(Species_Group = case_when(Species_Group == "Ulvophyceae" ~ "Chlorophyceae",
                                   T ~ Species_Group))

colscal <- c("Bacillariophyceae"="#DAA520",
             "Magnoliopsida"="#389318",
             "Phaeophyceae"="#873e23", 
             "Chlorophyceae"="#768807",
             "Xanthophyceae"="#e0e809")


a <- ggplot() +
    geom_point(data=MDSData,aes(x=x,y=y,colour=Species_Group) ,alpha=0.9,size=0.5) +
    geom_polygon(data=hullsData,aes(x=x,y=y,fill=Species_Group) ,alpha=0.2) +
    theme_Bede() +
    scale_colour_manual(name="Class",values = colscal) +
    scale_fill_manual(name="Class",,values = colscal) +
    labs(y="",
       x="",
       colour="Class",
       fill="Class") +
  facet_wrap(~Data,ncol = 2, 
  labeller = labeller( Data = Data.labs) ,
  scales = "free")  +
    theme(axis.text.x=element_blank(),
      axis.ticks.x=element_blank(),
      axis.text.y=element_blank(),
      axis.ticks.y=element_blank(),
      plot.margin = unit(c(1.25,1.25,1.25,1.25), "cm"),
      strip.text = element_text(size=14),
      legend.title = element_text(size=14),
      legend.text = element_text(size=14),
      legend.direction = "vertical",
      legend.position = "top",
      legend.justification = "center")+
  guides(fill=guide_legend(ncol=3),
         colour=guide_legend(ncol=3))
  

ggsave(filename = "Images/Part1/nMDS_3sensors.svg", 
       plot = a, 
       width = 10,
       height = 10, 
       units = "in")


```

::: {.absolute .fragment .fade-out fragment-index="1" top="6.5%"}
*Hyperspectral library*
:::

::: {.fragment .fade-out fragment-index="4"}
::: {.absolute .fragment .fade-in fragment-index="1" top="6.5%"}
*Hyperspectral library - nMDS*
:::
:::

::: {.fragment .fade-out fragment-index="7"}
::: {.absolute .fragment .fade-in fragment-index="4" top="6.5%"}
*Hyperspectral library - Random Forest Classifier*
:::
:::



::: {.absolute .fragment .fade-out fragment-index="1" top="10%" left="-5%"}

![](Images/Part1/Menu_library.png){height="1100"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="1" top="10%" left="-5%"}

![](Images/Part1/Menu_library_ASD.png){height="1100"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="1" top="5%" right="-5%"}

![](Images/Part1/Figure_part1_ASD-01.png){height="1200"}
:::


::: {.absolute .fragment .fade-in-then-out fragment-index="2" top="10%" left="-5%"}

![](Images/Part1/Menu_library_Micasense.png){height="1100"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="2" top="5%" right="-5%"}

![](Images/Part1/Figure_part1_Drone-01.png){height="1200"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="3" top="10%" left="-5%"}

![](Images/Part1/Menu_library_S2.png){height="1100"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="3" top="5%" right="-5%"}

![](Images/Part1/Figure_part1_S2-01.png){height="1200"}
:::


```{r Conf_Mat}
#| error: false
#| warning: false
#| echo: false
#| eval: false

library(tidyverse)

Final_Conf<-read_csv("Data/Part1/RandomForestConf.csv")%>% 
  dplyr::rename(Truth=col,Prediction=row)%>% 
  dplyr::group_by(Prediction,Truth,Model,Data) %>% 
  dplyr::summarise(value=sum(value) ) %>% 
  dplyr::ungroup() %>% 
  dplyr::mutate(correct=case_when(Truth==Prediction~1,
                                  !Truth==Prediction~0,
                                  TRUE~9999,
                                  ) ) %>% 
  group_by(Truth,Model,Data) %>% 
  summarise(True_Acc=signif((value*correct)/sum(value),2),
            value=value,
            correct=correct,
            Prediction=Prediction) %>% 
  dplyr::ungroup() %>% 
  group_by(Prediction,Model,Data) %>% 
  summarise(Pred_Acc=signif((value*correct)/sum(value),2),

            value=value,
            correct=correct,
            True_Acc=True_Acc,
            Truth=Truth)


Total<-read_csv("Data/Part1/RandomForestConf.csv") %>% 
  dplyr::filter(Data=="ASD") %>% 
  group_by(col) %>% 
  dplyr::summarise(tot=sum(value))

Conf_Df_Plot<-Final_Conf %>% 
  dplyr::full_join(Total,by=c("Truth"="col") ) %>% 
  dplyr::mutate(Prop=if_else((value/tot)>1,1,value/tot),
                Data=as.factor(Data) ,
                Prediction=as.factor(case_when(
                              Prediction=="Bacillariophyceae"~"Bac",
                              Prediction=="Bare Sediment"~"Bar",
                              Prediction=="Magnoliosida"~"Mag",
                              Prediction=="Phaephyceae"~"Pha",
                              Prediction=="Ulvophyceae"~"Ulv",
                              Prediction=="Xanthophyceae"~"Xan") ) ,
                Truth=as.factor(case_when(
                              Truth=="Bacillariophyceae"~"Bac",
                              Truth=="Bare Sediment"~"Bar",
                              Truth=="Magnoliosida"~"Mag",
                              Truth=="Phaephyceae"~"Pha",
                              Truth=="Ulvophyceae"~"Ulv",
                              Truth=="Xanthophyceae"~"Xan") )) %>% 
  ungroup()%>% 
  dplyr::mutate(Data=forcats::fct_relevel(Data,
                                          c("ASD",
                                            "PRISMA",
                                            "Drone",
                                            "Sentinel-2 20m",
                                            "Pleiades",
                                            "Sentinel-2 10m") ),
                Prediction=forcats::fct_relevel(Prediction,rev) )%>% 
 dplyr::filter(Prop>0)

```

```{r Conf_Mat_Plot}
#| error: false
#| warning: false
#| echo: false
#| eval: false
library(Utilities.Package)

cropped_df <- Conf_Df_Plot %>% 
  dplyr::filter(Data %in% c("ASD"
                            ,"Drone"
                            , "Sentinel-2 10m"
                            )
                )

for(i in 1:length(unique(cropped_df$Data))){
  
  print(unique(cropped_df$Data)[i])
plot_i <- cropped_df %>% 
  dplyr::filter(Data == unique(cropped_df$Data)[i]) %>% 
    ggplot()+
      geom_tile(aes(x=Truth,y=Prediction,alpha=Prop,fill=Prop,group=Model) )+
      geom_label(data=function(x) dplyr::filter(x, True_Acc>0),
                 aes(x=Truth,y=7.25,label=True_Acc,fill=True_Acc),
                 size=2.5)+
      geom_label(data=function(x) dplyr::filter(x, Pred_Acc>0),
                 aes(x=7.25,y=Prediction,label=Pred_Acc,fill=Pred_Acc),
                 size=2.5)+
      facet_wrap(~Data,ncol = 2,scales="free")+
      theme_Bede()+
      scale_fill_Bede("Climate",
                      name="Proportion of\nTotal Samples",
                      # breaks=c(0.0001,0.25,0.5,0.75,1),
                      limits=c(0.5,1.001),
                      oob      =  scales::squish,          # anything <0.5 → 0.5; >1 → 1
                      discrete=F,
                      alpha=0.9,)+
      scale_alpha_continuous(range = c(0.25, 1) )+
      scale_x_discrete(expand=expansion(mult=c(0.2,0.4) )) +
      scale_y_discrete(expand=expansion(mult=c(0.3,0.55) )) +
      guides(alpha = "none")+
        theme(plot.margin = unit(c(1.25,1.25,1.25,1.25), "cm"),
                          strip.text = element_text(size=14),
                          legend.title = element_text(size=12),
                          legend.text = element_text(size=14))
                  
  ggsave(paste0("Images/Part1/conf_mat_", unique(cropped_df$Data)[i],".png"),plot_i, units="in",width=8, height=5, dpi=300)

}
  
  


ggsave("Images/Part1/conf_mat_ASD.png", units="in",width=8, height=5, dpi=300)


```


::: {.absolute .fragment .fade-in-then-out fragment-index="4" top="10%" left="-5%"}

![](Images/Part1/Menu_library_ASD.png){height="1100"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="4" top="10%" left="6%"}

![](Images/Part1/conf_mat_ASD.png){height="1100"}
:::

::: {.absolute top="40%" right="0%" .fragment .fade-in-then-out fragment-index="4" style="font-size: 60px;"}
- Global accuracy: 0.95
- Cohen's kappa: 0.93
- Sensitivity: 0.93
- Specificity: 0.98
:::




::: {.absolute .fragment .fade-in-then-out fragment-index="5" top="10%" left="-5%"}

![](Images/Part1/Menu_library_Micasense.png){height="1100"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="5" top="10%" left="6%"}

![](Images/Part1/conf_mat_Drone.png){height="1100"}
:::

::: {.absolute top="40%" right="0%" .fragment .fade-in-then-out fragment-index="5" style="font-size: 60px;"}
- Global accuracy: 0.94
- Cohen's kappa: 0.93
- Sensitivity: 0.94
- Specificity: 0.98
:::



::: {.absolute .fragment .fade-in-then-out fragment-index="6" top="10%" left="-5%"}

![](Images/Part1/Menu_library_S2.png){height="1100"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="6" top="10%" left="6%"}

![](Images/Part1/conf_mat_Sentinel-2 10m.png){height="1100"}
:::

::: {.absolute top="40%" right="0%" .fragment .fade-in-then-out fragment-index="6" style="font-size: 60px;"}
- Global accuracy: 0.83
- Cohen's kappa: 0.79
- Sensitivity: 0.84
- Specificity: 0.96
:::


::: {.fragment .fade-out fragment-index="17"}
::: {.absolute .fragment .fade-in fragment-index="7" top="6.5%"}
*Drone imagery - Example of classification*
:::


::: {.absolute .fragment .fade-in fragment-index="7" bottom="-8%" right="-7.6%"}
![](Images/Part1/Map_Drone_gaf-01.png){height="1400"}
:::
:::


```{r Figure 4 Gaf Low}
#| echo: false
#| warning: false
#| eval: false

library(tidyverse)
library(terra)
library(sf)

Gafanha_low_ortho <- rast("Data/Part1/Gafanha_low_multi_resampled_colored.tif")

zoom_extent<-"Data/Part1/zoom_extent_map_Gafanha_comparison.shp" %>% 
  read_sf()


######### RGB #########

 names(Gafanha_low_ortho)<-c("B1", "B3", "B5","alpha")

 values(Gafanha_low_ortho)[values(Gafanha_low_ortho$alpha) == 0] = NA
  
 Gafanha_low_ortho_zoomed<-Gafanha_low_ortho %>% 
   crop(zoom_extent)
 
 # RGB(Gafanha_low_ortho_zoomed) <- 1:3
 
 map_extent_full<- st_as_sf(as.polygons(ext(Gafanha_low_ortho)))
 sf::st_crs(map_extent_full)<-st_crs(Gafanha_low_ortho)
 

  map_extent_zommed<- st_as_sf(as.polygons(ext(Gafanha_low_ortho_zoomed)))
 sf::st_crs(map_extent_zommed)<-st_crs(Gafanha_low_ortho_zoomed)
 
 
 rgb_Gafanha_low_zoomed<-ggplot()+
   tidyterra::geom_spatraster_rgb(data = Gafanha_low_ortho_zoomed, 
                                  r = 3,
                                  g = 2,
                                  b = 1)+
   theme_Bede_Map()+
   geom_sf(data = zoom_extent, fill = "transparent", colour = "red2",linetype = "dashed", linewidth = 1.5)+
   # coord_sf(crs = 4326)+
     theme_void()



 scale_labels<-data.frame(x = c(-8.74368, -8.743565,-8.74342),
                          y = c(rep(40.59792,3)),
                          text = c("0","10","20 m"))
 
 
 target_shp <- read_sf("Data/Part1/model_px_8m.shp")
 
 for (i in 1:nrow(target_shp)) {
   
   shp <- target_shp[i,]
   
   img_i <- Gafanha_low_ortho[[1:3]] %>% 
     crop(shp, mask = T)
   
   RGB(img_i) <- 1:3
   
   plot(img_i)
   
   writeRaster(img_i,paste0("Images/Part1/RGB_sample_", shp$Target,"8m.png"), overwrite = T)
 }
 
 
 
rgb_Gafanha_low<- ggplot()+
  # scale_fill_manual("", 
  #                   labels = c("Intertidal area", "Land area", "water"),
  #                   values = c("#7DC27D", "#CFCFCF","#42c9bc"))+
  # geom_sf(data = background_GafHigh,
  #         fill = "white",
  #         show.legend = F,
  #         linewidth=0.05,
  #         alpha=0.4,
  #         colour="white")+
  # geom_sf(data = background_GafHigh,
  #         mapping = aes(fill = Type),
  #         show.legend = F, 
  #         linewidth=0.05,
  #         alpha=0.4,
  #         colour="grey30")+
   tidyterra::geom_spatraster_rgb(data = Gafanha_low_ortho,
         r = 1,
         g = 2,
         b = 3,
         maxcell = 4010533
         # maxcell = 10000

         )+
    ggspatial::annotation_scale(location = "tl",
                                text_cex=2)+
      # annotation_custom(ggplotGrob(p1),
      #                   xmin = -8.7430,
      #                   xmax = -8.742702,
      #                   ymin = 40.5970515, 
      #                   ymax = 40.5974) +
   theme_Bede_Map()+
   # geom_sf(data = zoom_extent, 
   #         fill = "transparent",
   #         colour = "red2",
   #         linetype = "dashed", 
   #         linewidth = 1.5)+
   # coord_sf(crs = 4326)+
  # annotation_custom(ggplotGrob(rgb_Gafanha_low_zoomed),
  #                   xmin = -8.7430,
  #                   xmax=-8.7427,
  #                   ymin = 40.5977) +
  # geom_path(aes(x,y,group=grp),
  #           data = data.frame(x = c(-8.7432439,-8.743,-8.7432439,-8.743),
  #                             y=c(40.5976275,40.5979,40.5975373,40.59771),
  #                             grp=c(1,1,2,2)),
  #           linetype = "dashed", linewidth = 1.5, color = "red2")+
  theme(axis.title = element_blank(),
        axis.text.y = element_text(size = 20),
        axis.text.x = element_text(size = 20, angle = 20, hjust = 1))+
    scale_x_continuous(limits = c(-8.7437, -8.74295), breaks = -8.7432)+
    scale_y_continuous(limits = c(40.59715, 40.5979), breaks = 40.5975)
 
# rgb_Gafanha_low
 
 
  
  

ggsave("Images/Part1/Map_Pred/Gaf_Low_RGB.png",rgb_Gafanha_low , width = 900*4, height = 863*4, units = "px")

####### Zoomed map ########


Gafanha_low_pred_zoomed<-"Data/Part1/AveiroLowPrediction_nnNewStanRawMetrics_Preds_NoXantho_7.tif" %>% 
  rast()
names(Gafanha_low_pred_zoomed)<-"layer"

Gafanha_low_pred_zoomed<-Gafanha_low_pred_zoomed %>% 
  crop(zoom_extent)
Gafanha_low_pred_zoomed<-as.factor(Gafanha_low_pred_zoomed)

Gafanha_low_pred_map_zoomed<-ggplot()+
  tidyterra::geom_spatraster(data = Gafanha_low_pred_zoomed, mapping = aes(fill = layer))+
  geom_sf(data = zoom_extent, fill = "transparent", colour = "black",linetype = "dashed", linewidth = 1.5)+
  # coord_sf(crs = 4326)+
  scale_fill_manual(values=c("#A3A3A3", "#b3ff1a","#70543e", "#DAA520", "#389318","#5C2E1A","#b3002d", NA, "#42c9bc"), na.value = NA)+
  theme_void()+
  # coord_equal()+
  theme(axis.text.x = element_blank(),
      axis.text.y = element_blank(),
      axis.title = element_blank())+
  theme(legend.position = "none")
 # Gafanha_low_pred_map_zoomed

####  Overall map
Gafanha_low_pred<-"Data/Part1/AveiroLowPrediction_nnNewStanRawMetrics_Preds_NoXantho_7.tif" %>% 
  rast()
names(Gafanha_low_pred)<-"layer"


values(Gafanha_low_pred)[values(Gafanha_low_pred) == 0] = NA

Gafanha_low_pred<-Gafanha_low_pred %>% 
  as.factor()


 
 target_shp <- read_sf("Data/Part1/model_px_8m.shp")
 
 for (i in 1:nrow(target_shp)) {
   
   shp <- target_shp[i,]
   
   img_i <- Gafanha_low_pred %>% 
     crop(shp, mask = T)
   
   
   plot_i <-
  ggplot()+
  # scale_fill_manual("", 
  #                   labels = c("Intertidal area", "Land area", "water"),
  #                   values = c("white", "white","white"))+
  # geom_sf(data = background_GafHigh,
  #         mapping = aes(fill = Type),
  #         show.legend = F, 
  #         linewidth=0.05,
  #         alpha=0.4,
  #         colour="grey30")+
  # geom_sf(data = background_GafHigh,
  #         fill = "white",
  #         show.legend = F, 
  #         linewidth=0.05,
  #         alpha=1,
  #         colour="white")+
   ggnewscale::new_scale("fill")+
    tidyterra::geom_spatraster(data = img_i, 
                               mapping = aes(fill = layer),
                               maxcell = 500832*8,
                               show.legend = F)+
  # geom_sf(data = zoom_extent, 
  #         fill = "transparent", 
  #         colour = "black",
  #         linetype = "dashed", 
  #         linewidth = 1.5)+
  # # coord_sf(crs = 4326)+
  # annotation_custom(ggplotGrob(Gafanha_low_pred_map_zoomed), 
  #                   xmin = -8.7430,
  #                   xmax=-8.7427, 
  #                   ymin = 40.5977) +
  # geom_path(aes(x,y,group=grp),
  #           data = data.frame(x = c(-8.7432439,-8.743,-8.7432439,-8.743),
  #                             y=c(40.5976275,40.5979,40.5975373,40.59771),
  #                             grp=c(1,1,2,2)),
            # linetype = "dashed", linewidth = 1.5)+
  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),
                    values=c("#A3A3A3", "#b3ff1a", "#DAA520", "#389318","#5C2E1A","#b3002d", "#42c9bc",NA,NA,NA,NA),
                    na.value = NA,
                    name = "",
                    labels = c("Sediment",
                               "Chlorophyceae",
                               "Bacillariophyceae",
                               "Magnoliopsida",
                               "Phaeophyceae",
                               "Rhodophyceae",
                               "Water"))+
  theme_void()+
     coord_sf(expand = F)
   
   
   
   ggsave(paste0("Images/Part1/Pred_sample_", shp$Target,"_8m.png"), plot_i, height = 10, width = 10)
 }


####### Pred ######



Gafanha_low_pred_map <-
  ggplot()+
  # scale_fill_manual("", 
  #                   labels = c("Intertidal area", "Land area", "water"),
  #                   values = c("white", "white","white"))+
  # geom_sf(data = background_GafHigh,
  #         mapping = aes(fill = Type),
  #         show.legend = F, 
  #         linewidth=0.05,
  #         alpha=0.4,
  #         colour="grey30")+
  # geom_sf(data = background_GafHigh,
  #         fill = "white",
  #         show.legend = F, 
  #         linewidth=0.05,
  #         alpha=1,
  #         colour="white")+
   ggnewscale::new_scale("fill")+
    tidyterra::geom_spatraster(data = Gafanha_low_pred, 
                               mapping = aes(fill = layer),
                               maxcell = 500832*8)+
  # geom_sf(data = zoom_extent, 
  #         fill = "transparent", 
  #         colour = "black",
  #         linetype = "dashed", 
  #         linewidth = 1.5)+
  # # coord_sf(crs = 4326)+
  # annotation_custom(ggplotGrob(Gafanha_low_pred_map_zoomed), 
  #                   xmin = -8.7430,
  #                   xmax=-8.7427, 
  #                   ymin = 40.5977) +
  # geom_path(aes(x,y,group=grp),
  #           data = data.frame(x = c(-8.7432439,-8.743,-8.7432439,-8.743),
  #                             y=c(40.5976275,40.5979,40.5975373,40.59771),
  #                             grp=c(1,1,2,2)),
            # linetype = "dashed", linewidth = 1.5)+
  scale_fill_manual(breaks = c(1,2,5,6,7,8,10),
                    values=c("#A3A3A3", "#b3ff1a", "#DAA520", "#389318","#5C2E1A","#b3002d", "#42c9bc",NA,NA,NA,NA),
                    na.value = NA,
                    name = "",
                    labels = c("Sediment",
                               "Chlorophyceae",
                               "Bacillariophyceae",
                               "Magnoliopsida",
                               "Phaeophyceae",
                               "Florideophyceae",
                               "Water"))+
  theme_Bede_Map()+
  # coord_equal()+
   theme(axis.text.x = element_text(size = 20, angle = 20,hjust = 1),
         # axis.text.y = element_text(size = 20),
         axis.text.y = element_blank(),
         axis.title = element_blank(),
         legend.background = element_blank(),
         legend.position = c(0.4,0.3),
         legend.text = element_text(size = 20),
         legend.key.size = unit(1,"cm"))+
    scale_x_continuous(limits = c(-8.7437, -8.74295), breaks = -8.7432)+
    scale_y_continuous(limits = c(40.59715, 40.5979), breaks = 40.5975)


ggsave("Images/Part1/Map_Pred/Gaf_Low_Pred.png",Gafanha_low_pred_map , width = 771*4, height = 863*4, units = "px")

################# PLOT AND SAVING ###########

plot_Gaf_Low<-rgb_Gafanha_low+
  Gafanha_low_pred_map
 
ggsave("Figures/High_res/Maps Pred/FigX-Gaf_Low_Pred.png",plot_Gaf_Low , width = 1920*4, height = 1009*4, units = "px")





# 2. Convert its centroid to an sf POINT
r_centroid <- st_as_sf(as.points(ext(Gafanha_low_pred), crs = crs(Gafanha_low_pred))) %>% 
              st_centroid()

# 3. Pick a UTM zone based on that longitude
lonlat <- st_coordinates(r_centroid)
utm_zone <- floor((lonlat[1] + 180) / 6) + 1
utm_crs  <- paste0("+proj=utm +zone=", utm_zone,
                   ifelse(lonlat[2] >= 0, " +north", " +south"),
                   " +datum=WGS84 +units=m +no_defs")

# 4. Reproject the centroid into metres
pt_utm <- st_transform(r_centroid, crs = utm_crs)

# 5. Build a 10 m × 10 m square around it by buffering 5 m with square caps
square_utm <- st_buffer(pt_utm,
                        dist = 4,                # half side‐length
                        endCapStyle = "SQUARE",  
                        joinStyle   = "MITRE")

# (Optionally) 6. Transform the square back to lon/lat (EPSG:4326)
square_wgs84 <- st_transform(square_utm, crs = 4326)

write_sf(square_wgs84, "Data/Part1/model_px_8m.shp")

```
::: {.fragment .fade-out fragment-index="13"}
::: {.absolute .fragment .fade-in fragment-index="7" top="14%" left="-5%"}

![](Images/Part1/Map_Pred/Gaf_Low_RGB.png){height="1100"}
:::
:::

::: {.blackarrow .absolute top="68%" left="28%" .fragment .fade-in-then-out fragment-index="8" style="border: 4px solid;" height="0px" width="500px"}
:::

::: {.blackarrow .absolute top="61%" left="21%" .fragment .fade-in-then-out fragment-index="9" style="border: 4px solid;" height="0px" width="670px"}
:::

::: {.blackarrow .absolute top="30%" left="22%" .fragment .fade-in-then-out fragment-index="10" style="border: 4px solid;" height="0px" width="650px"}
:::

::: {.blackarrow .absolute top="35%" left="28%" .fragment .fade-in-then-out fragment-index="11" style="border: 4px solid;" height="0px" width="500px"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="8" top="27%" left="50%"}
:::{.absolute bottom="-7%" left="18%" style="font-size: 60px;"}
Chlorophyceae
:::

![](Images/Part1/RGB_sample_Green8m.png){height="600"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="9" top="27%" left="50%"}
:::{.absolute bottom="-7%" left="13%" style="font-size: 60px;"}
Bacillariophyceae
:::

![](Images/Part1/RGB_sample_MPB8m.png){height="600"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="10" top="27%" left="50%"}
:::{.absolute bottom="-7%" left="16%" style="font-size: 60px;"}
Magnoliopsida
:::

![](Images/Part1/RGB_sample_Seagrass8m.png){height="600"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="11" top="27%" left="50%"}
:::{.absolute bottom="-7%" left="13%" style="font-size: 60px;"}
Florideophyceae
:::

![](Images/Part1/RGB_sample_red8m.png){height="600"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="12" top="14%" left="37%"}

![](Images/Part1/Map_Pred/Gaf_Low_Pred.png){height="1100"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="13" top="20%" left="0%"}
:::{.absolute bottom="-7%" left="22%" style="font-size: 60px;"}
Chlorophyceae
:::

![](Images/Part1/RGB_sample_Green8m.png){height="800"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="13" top="20%" left="33%"}
::: {.absolute top="0%" right="-40%"}
![](Images/Part1/Map_Pred/legend.png){height="400"}
:::

![](Images/Part1/Pred_sample_Green_8m.png){height="800"}
:::


::: {.absolute .fragment .fade-in-then-out fragment-index="14" top="20%" left="0%"}
:::{.absolute bottom="-7%" left="22%" style="font-size: 60px;"}
Bacillariophyceae
:::

![](Images/Part1/RGB_sample_MPB8m.png){height="800"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="14" top="20%" left="33%"}
::: {.absolute top="0%" right="-40%"}
![](Images/Part1/Map_Pred/legend.png){height="400"}
:::

![](Images/Part1/Pred_sample_MPB_8m.png){height="800"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="15" top="20%" left="0%"}
:::{.absolute bottom="-7%" left="22%" style="font-size: 60px;"}
Magnoliopsida
:::

![](Images/Part1/RGB_sample_seagrass8m.png){height="800"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="15" top="20%" left="33%"}
::: {.absolute top="0%" right="-40%"}
![](Images/Part1/Map_Pred/legend.png){height="400"}
:::

![](Images/Part1/Pred_sample_seagrass_8m.png){height="800"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="16" top="20%" left="0%"}
:::{.absolute bottom="-7%" left="22%" style="font-size: 60px;"}
Florideophyceae
:::

![](Images/Part1/RGB_sample_red8m.png){height="800"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="16" top="20%" left="33%"}
::: {.absolute top="0%" right="-40%"}
![](Images/Part1/Map_Pred/legend.png){height="400"}
:::

![](Images/Part1/Pred_sample_red_8m.png){height="800"}
:::


::: {.absolute .fragment .fade-in-then-out fragment-index="17" top="6.5%"}
*Drone imagery - Validation*
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="17" bottom="0%" left="10%"}

![](Images/Part1/ConfusionMatrixGlobal.png){height="1200"}
:::

```{r VIP}
#| cache: false
#| echo: false
#| warning: false
#| eval: false

library(tidyverse)
library(Utilities.Package)
log_func <- function(x) {
  0.9 + 0.1 * log(x / 400) / log(900 / 400)
}
exp_func <- function(x) {
  1 - exp(-0.01735 * (x - 444))
}

DataCombo <- read.csv("Data/Part1/DataCombo.csv")%>% 
  dplyr::filter(Data %in% c("ASD","Drone","Sentinel-2 10m")) 

DataCombo$Data <- factor(DataCombo$Data, levels = c(
  "ASD","Drone","Sentinel-2 10m"
  # "PRISMA",
  
  # # "Sentinel-2 20m",
  # # "Pleiades",
  
)) 


SP1<-read.csv("Data/Part1/Spectra_VIP.csv") %>%
  dplyr::select(-X) %>%
  mutate(type = "Min/Max Standardised Spectra") %>%
  dplyr::filter(Class != "Bare Sediment",
                Class != "Sun Glint",
                Class != "Water",
                Class != "Xanthophyceae",
                Class != "A - MagnoliopsidaL") %>%
  as_tibble()%>%
  rename(value = "STD") %>% 
  dplyr::filter(Class == "C - Rhodophyceae") %>% 
  dplyr::select(Species_Group = "Class", Mean_Reflec = "value", Wavelength) %>% 
  mutate(Mean_Reflec = case_when(Wavelength %in% c(531,560,650) ~ Mean_Reflec *0.15,
                                 Wavelength %in% c(668) ~ Mean_Reflec *0.1,
                                 T ~ Mean_Reflec))
### Just chloro and Magno

plot_SRF_sp <- DataCombo %>% 
  as_tibble() %>% 
  dplyr::filter(
    Species_Group %in% c("Magnoliopsida","Ulvophyceae","Phaeophyceae","Bacillariophyceae"),
                Data == "Drone",
                Rep == "Rep_1") %>% 
  dplyr::select(Wavelength,Species_Group,Mean_Reflec)  %>% 
  bind_rows(SP1) %>% 
  mutate(Species_Group = case_when(Species_Group == "C - Rhodophyceae" ~ "Florideophyceae",
                                   Species_Group == "Ulvophyceae" ~ "Chlorophyceae",
                                   T ~ Species_Group))

# ################# SPECTRA ########### 
# 
# colscale <- c("Magnoliopsida" = "#598f35", "Ulvophyceae" = "#c4fb58")

(SP_plot<-plot_SRF_sp %>%
  # dplyr::filter(Class %in% c("D - Chloropyceae", "A - Magnoliopsida")) %>%
  ggplot(aes( x = Wavelength, y = Mean_Reflec, color = Species_Group))+
  geom_line(linewidth = 2)+
  # facet_wrap(~ type, scale = "free",ncol =1) +
  scale_color_manual(values=c( "#DAA520", "#b3ff1a", "#b3002d","#389318", "#873e23"))+
  ylab("Reflectance")+
  xlab("Wavelength (nm)")+
  theme_Bede()+
  theme(axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20),
        axis.title.x = element_text(size = 25),
        axis.title.y = element_text(size = 25),
        strip.text = element_text(size=25),
        legend.position = c(0.2, 0.7),
        plot.background = element_rect(fill = rgb(1,1,1, alpha=0), colour = NA),
        legend.title=element_blank(),
        legend.text = element_text(size = 20),
        legend.key.size = unit(1.5, "cm"),
        legend.text.align = 0,
        panel.border = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(color="black"))
)
############## VIP ##############

VIP<-"Data/Part1/NN_VIP_byClass_NoXanth.csv" %>%
  read.csv() %>% 
  mutate(Magnoliopsida = (Magnoliosida + Low_SPC)/2) %>% 
  dplyr::select(-c(Magnoliosida ,Low_SPC))

VIP1<-VIP %>%
  dplyr::select(-c(Water,
                   SunGlint,
                   Deep_Sediment,
                   Bare_Sediment)) %>%
  # dplyr::filter(!str_detect(X,"NDVI")) %>% 
  mutate(isSTD = case_when(str_detect(X,"Stan") ~ "Standardised", 
                         TRUE ~ "RAW")) %>%
  pivot_longer(-c(X,isSTD), names_to = "Class",values_to = "value") %>% 
  dplyr::filter(X != "NDVI",
                X != "NDVI_Stan") %>% 
  group_by(Class) %>%
  mutate(STD = (value-min(value))/(max(value)-min(value))) %>% 
  ungroup() %>% 
  mutate(Class = case_when(Class == "Magnoliosida" ~ "Magnoliopsida",
                           Class == "Low_SPC" ~ "Magnoliopsida",
                           Class == "Clorophyta" ~ "Chlorophyceae",
                           Class == "Rhodphyta" ~ "Rhodophyceae",
                           Class == "MPB" ~ "Bacillariophyceae",
                           Class == "Phaeophyta" ~ "Phaeophyceae",
                           TRUE ~ Class),
         Variable = str_replace_all(str_replace_all(str_replace_all(X,"Reflectance",""),"Stan",""),"_","")) %>% 
  dplyr::filter(Class != "Total") 

VIP_summarised<-VIP1 %>% 
  group_by(Variable, Class) %>% 
  dplyr::summarise(sumVIP = sum(STD)) %>% 
  ungroup() %>% 
  group_by(Class) %>% 
  mutate(STD = (sumVIP-min(sumVIP))/(max(sumVIP)-min(sumVIP)))

(VIP_subPLOT<-VIP_summarised %>% 
  dplyr::filter(Class %in% c("Magnoliopsida", "Chlorophyceae")) %>% 
  ggplot(aes(x = Variable, y = STD, fill = Class)) +
  geom_col(color = "black",position =  "dodge", show.legend = F) +
  coord_polar()+
  scale_y_continuous(limits = c(0,1), breaks = c(0.25,0.5,0.75,1))+
  facet_wrap(~Class)+
  scale_fill_manual("Class", labels = c("Chlorophyceae", "Magnoliopsida"),
                    values = c("#b3ff1a", "#389318"))+
  theme_Bede()+
  theme(panel.grid.major.y = element_line(linetype = "dotted",color = c("grey9","grey9","grey9","grey9",NA)))+
  ylab("Importance")+
  theme(legend.position="top",
        strip.text = element_text(size = 20),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 15),
        axis.ticks.y =element_blank(),
        axis.title.x =element_blank(),
        axis.title.y =element_text(size = 20),
        legend.key.size = unit(1, 'cm'),
        legend.title = element_text(size=20),
        legend.text = element_text(size=20))+
  guides(fill = guide_legend(nrow = 1))
)

ggsave("Images/Part1/Fig_VIP.png", VIP_subPLOT, width = 10, height = 5, units = "in", dpi = 300)

ggsave("Images/Part1/Fig_VIP_Spectra.png", SP_plot, width =10, height = 10, units = "in", dpi = 300)

```

::: {.absolute .fragment .fade-in fragment-index="18" top="6.5%"}
*Drone imagery - Variable importance*
:::

::: {.absolute .fragment .fade-in fragment-index="18" top="20%" left="00%"}
![](Images/Part1/Fig_VIP.png){height="800"}
:::

::: {.absolute .fragment .fade-in fragment-index="18" top="20%" right="0%"}
![](Images/Part1/Fig_VIP_Spectra.png){height="900"}
:::

## Discussion

::: {.absolute top="6.5%"}
*Pigment Composition, Spectral Signature and Variable Importance*
:::


<!-- ::: {.absolute .fragment .fade-out fragment-index="2" top="10%" left="0%"} -->
<!-- ![](Images/Part1/Figure13.png){height="500"} -->
<!-- ::: -->

::: {.absolute .fragment .fade-out fragment-index="2" top="10%" left="0%" }
![](Images/Part1/Figure_Hyperspectral_Faded.gif){height="800"}
:::

:::{.absolute top="0%" left="50%" style="font-size: 60px;"}
**Similar pigment composition,...**

-  ... but difference in carotenoid to chlorophyll-a ratios ([Repolho et al., 2017](http://doi.org/10.1038/srep41443))
:::


:::{.absolute top="25%" left="50%" .fragment .fade-in fragment-index="2" style="font-size: 60px;"}
**Distinction between green macrophyte possible, ...**

- ... and ~530 nm & ~650 nm are key wavelengths

:::


:::{.absolute top="55%" left="50%" .fragment .fade-in-then-out fragment-index="3" style="font-size: 60px;"}
**Green macrophytes often co-occurs in intertidal areas...**

- Ultra high spatial resolution (from 80 to 8mm per pixel)
:::

:::{.absolute top="55%" left="50%" .fragment .fade-in fragment-index="4" style="font-size: 60px;"}
**Green macrophytes often co-occurs in intertidal areas...**

- Ultra high spatial resolution (from 80 to 8mm per pixel)
- Easy Photo-interpretation of pixels
- More then 1 000 000 training pixels. Over 11 sites of 3 country
- Diverse training dataset
:::


:::{.absolute top="10%" left="5%" .fragment .fade-in fragment-index="4" style="font-size: 60px;"}
Drone: 0,26 ha ~ 2.5 millions pixels

S2: 25 000 hectares ~ 2.5x Paris
:::

::: {.absolute  .fragment .fade-in-then-out fragment-index="2" top="7%" left="3%" }
![](Images/Part1/conf_mat_Sentinel-2 10m.png){height="650"}
:::

::: {.absolute .fragment .fade-in-then-out fragment-index="2" bottom="-5%" left="10%" }
![](Images/Part1/Map_Pred/Fig_VIP_magn.png){height="630"}
:::


::: {.absolute .fragment .fade-in-then-out fragment-index="3" bottom="-5%" left="10%" }

![](Images/Part1/Green_bourgneuf.jpg){height="1200"}
:::


::: {.absolute .fragment .fade-in fragment-index="4" top="20%" left="-30%" }

![](Images/Part1/Gafanha_Low.png){style="transform: rotate(45deg); height="2000"}
:::

:::{.absolute .fragment .fade-in-then-out fragment-index="3" bottom="0%" left="11%" style="font-size: 40px; color: white;"}
*Bourgneuf Bay, July 2024*
:::



# Case Study 1 – Facing Biological Invasions {data-stack-name="Invasive species"  background-image="Images/Part2/Background_Part2.png"}

- Introduction of the problem (Gracilaria, aquaculture, why studying it ? )
- Mapping the algae, over space and time, with key factor influencing its distribution
- Implication for Management


## Coucou chouchouuuuuuuuuu
# Case Study 2 – Mapping the impact of Heatwaves on intertidal seagrasses {data-name="Marine Heatwaves"}

- Introduction (Seagrasses quickly, heatwaves mainly)
- Experiment
- Satellite observation
- Ecological consequences

# Discussion and Overview {data-name="Discussion"}

- Duality Drone and Satellite (Strength, weaknesses, complementary of methods)
- Remote sensing for coastal ecosystem Management
- Future direction (RS for aquaculture, penology, restoration...)
